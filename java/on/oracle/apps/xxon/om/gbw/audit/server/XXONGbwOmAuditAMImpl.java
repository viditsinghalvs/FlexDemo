package oracle.apps.xxon.om.gbw.audit.server;

import java.text.SimpleDateFormat;

import java.util.concurrent.TimeUnit;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCorpCodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCust5CodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwDemandBankLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwOperatingUnitLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwOpnLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPackageLovVOImpl;
import oracle.apps.xxon.om.gbw.util.XXONGbwUtil;

import oracle.jbo.domain.Date;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XXONGbwOmAuditAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XXONGbwOmAuditAMImpl() {
    }
String auditOrderQuery="SELECT order_number,\n" + 
                        "         header_id,\n" + 
                        "         corp_code,\n" + 
                        "         cust5_code,\n" + 
                        "         pal,\n" + 
                        "         package_cd,\n" + 
                        "         audit_level,\n" + 
                        "         NULL AS radio_btn_val,\n"+
                        "         line_number as ord_line_number "+
                        "     FROM XXON_OM_GBW_AUDIT_ORDERS_V XOGA";
String auditOrderLineQuery="SELECT order_number,\n" + 
                            "         header_id,\n" + 
                            "         corp_code,\n" + 
                            "         cust5_code,\n" + 
                            "         pal,\n" + 
                            "         package_cd,\n" + 
                            "         audit_level,\n" + 
                            "         NULL AS radio_btn_val,\n"+
                            "         line_number as ord_line_number "+
                            "     FROM XXON_OM_GBW_AUDIT_ORD_LINES_V XOGA";                       
 String auditFrstQuery="SELECT order_number,\n" + 
 "         header_id,\n" + 
 "         corp_code,\n" + 
 "         cust5_code,\n" + 
 "         pal,\n" + 
 "         package_cd,\n" + 
 "         audit_level,\n" + 
 "         NULL AS radio_btn_val,\n"+
 "         line_number as ord_line_number "+
 "     FROM XXON_OM_GBW_AUDIT_FR_V XOGA";
 String auditBopHeaderQuery=" SELECT order_number,\n" + 
 "         header_id,\n" + 
 "         corp_code,\n" + 
 "         cust5_code,\n" + 
 "         pal,\n" + 
 "         package_cd,\n" + 
 "         audit_level,\n" + 
 "         NULL AS radio_btn_val,\n"+
 "         line_number as ord_line_number "+
 "     FROM XXON_OM_GBW_AUDIT_BOP_HEADER_V XOGA";
 String auditBopLinesQuery="SELECT order_number,\n" + 
 "         header_id,\n" + 
 "         corp_code,\n" + 
 "         cust5_code,\n" + 
 "         pal,\n" + 
 "         package_cd,\n" + 
 "         audit_level,\n" + 
 "         NULL AS radio_btn_val,\n"+
 "         line_number as ord_line_number "+
 "     FROM XXON_OM_GBW_AUDIT_BOP_LINES_V XOGA";
 String auditSchCtrlQuery="SELECT order_number,\n" + 
                         "         header_id,\n" + 
                         "         corp_code,\n" + 
                         "         cust5_code,\n" + 
                         "         pal,\n" + 
                         "         package_cd,\n" + 
                         "         audit_level,\n" + 
                         "         NULL AS radio_btn_val,\n"+
                         "         line_number as ord_line_number "+
                         "     FROM XXON_OM_GBW_AUDIT_SCH_CTRLS_V XOGA";
    
/// audit details view's
 String schLineQuery="SELECT  audit_user_name,\n" + 
 "         audit_timestamp,\n" + 
 "         order_number,\n" + 
 "         attribute_name,\n" + 
 "         new_attribute_value,\n" + 
 "         old_attribute_value,\n" + 
 "         line_number,\n" + 
 "         audit_level,\n" + 
 "         responsibility_name,\n" + 
 "         header_id,\n" + 
 "         opn AS item_name\n" + 
 "  FROM   xxon_om_gbw_audit_schct_line_v";
    String frLineQuery="SELECT  audit_user_name,\n" + 
    "         audit_timestamp,\n" + 
    "         order_number,\n" + 
    "         attribute_name,\n" + 
    "         new_attribute_value,\n" + 
    "         old_attribute_value,\n" + 
    "         line_number,\n" + 
    "         audit_level,\n" + 
    "         responsibility_name,\n" + 
    "         header_id,\n" + 
    "         opn AS item_name\n" + 
    "  FROM   xxon_om_gbw_audit_fr_line_v";
    String bolLineQuery="SELECT  audit_user_name,\n" + 
    "         audit_timestamp,\n" + 
    "         order_number,\n" + 
    "         attribute_name,\n" + 
    "         new_attribute_value,\n" + 
    "         old_attribute_value,\n" + 
    "         line_number,\n" + 
    "         audit_level,\n" + 
    "         responsibility_name,\n" + 
    "         header_id,\n" + 
    "         opn AS item_name\n" + 
    "  FROM   xxon_om_gbw_audit_bol_line_v";
    String bohLineQuery="SELECT  audit_user_name,\n" + 
    "         audit_timestamp,\n" + 
    "         order_number,\n" + 
    "         attribute_name,\n" + 
    "         new_attribute_value,\n" + 
    "         old_attribute_value,\n" + 
    "         line_number,\n" + 
    "         audit_level,\n" + 
    "         responsibility_name,\n" + 
    "         header_id,\n" + 
    "         opn AS item_name\n" + 
    "  FROM   xxon_om_gbw_audit_boh_line_v";
    String soLineQuery="SELECT  audit_user_name,\n" + 
    "         audit_timestamp,\n" + 
    "         order_number,\n" + 
    "         attribute_name,\n" + 
    "         new_attribute_value,\n" + 
    "         old_attribute_value,\n" + 
    "         line_number,\n" + 
    "         audit_level,\n" + 
    "         responsibility_name,\n" + 
    "         header_id,\n" + 
    "         opn AS item_name\n" + 
    "  FROM   xxon_om_gbw_audit_so_line_v";
    XXONGbwUtil utils= new XXONGbwUtil();
    int javaBindNum=0;
    int javaOthBindNum=0;
    public void initSearchValVO()
    {
        XXONGbwSearchValuesVOImpl searchValuesVO=getXXONGbwSearchValuesVO1();
        if(!searchValuesVO.isExecuted())
        {
            searchValuesVO.executeQuery();
        }
        recDisInit();
    }
    public void recDisInit()
        {
            XXOnGbwAuditRecordDisplayVOImpl recordsDisplayVO=getXXOnGbwAuditRecordDisplayVO1();
            if(!recordsDisplayVO.isExecuted())
            {
                recordsDisplayVO.executeQuery();
            }
            XXONGbwAuditDetailRecDisVOImpl RecDisVO=getXXONGbwAuditDetailRecDisVO1();
            if(!RecDisVO.isExecuted())
            {
                RecDisVO.executeQuery();
            }
        
        }
 
    public String domainDateToString(Date dateInput)
    {
        log("start of domainDateToString");
        log("dateInput-->"+dateInput);
        String dateString=null;
     try{
          if(dateInput!=null)
          {
           SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
            java.util.Date date = null;
            date = formatter.parse(dateInput.toString());
            SimpleDateFormat formatter2 = new SimpleDateFormat("yyyy-MM-dd");
            dateString=formatter2.format(date);
          }
     }catch (Exception exp)
     {
         throw new OAException("Error while date conversion::"+exp.getMessage(),OAException.ERROR);
     }
        log("dateString-->"+dateString);
        return dateString;
    }
    public void executeAuditHeader(String auditGroupName)
       {
           try{
               log("start of executeAuditHeader");
               log("auditGroupName-->"+auditGroupName);
               javaBindNum=0;
               javaOthBindNum=0;
               XXONGbwSearchValuesVOImpl searchValuesVO=getXXONGbwSearchValuesVO1();
               XXONGbwSearchValuesVORowImpl row=(XXONGbwSearchValuesVORowImpl)searchValuesVO.first();
               String opn=null;
               String corpCode=null;
               String pkgCode=null;
               String ou=null;
               String cust5Code=null;
               String pal=null;
               String orderNumber=null;
               Date historyFromDate=null;
               Date historyToDate=null;
               String historyFromDateToString=null;
               String historyToDateToString=null;
               String dateRange=null;
               String demandType=null;
               String userName=null;
              if(auditGroupName.equals("auditSc"))
                 {
                     pkgCode=row.getPkgCode();
                     pal=row.getPal();
                     opn=row.getOpn();
                     historyFromDate=row.gethistoryFromDate();
                     historyToDate=row.gethistoryToDate();
                     dateRange=row.getDateRange();
                     userName=row.getUserName();
                     if(pal!=null&&pal.trim().length()>0&&pal.contains("%"))
                     {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR1",null,OAException.ERROR,null);
                     }
                 }else{
                     demandType=row.getDemandType();
                     opn=row.getOrderOpn();
                     corpCode=row.getCorpCode();                  
                     cust5Code=row.getCust5Code();                  
                     orderNumber=row.getorderNumber();
                     historyFromDate=row.gethistoryFromDate();
                     historyToDate=row.gethistoryToDate();
                     dateRange=row.getDateRange();
                     userName=row.getUserName();
                 }
                  log("opn-->"+opn);
                  log("corpCode-->"+corpCode);
                  log("pkgCode-->"+pkgCode);
                  log("ou-->"+ou);
                  log("cust5Code-->"+cust5Code);
                  log("pal-->"+pal);
                  log("orderNumber-->"+orderNumber);               
                  log("historyFromDate-->"+historyFromDate);          
                  log("historyToDate-->"+historyToDate);
                  log("dateRange-->"+dateRange);
                  log("demandType-->"+demandType);              
                  log("userName-->"+userName);
               if((historyFromDate!=null&&historyToDate!=null)&&(dateRange!=null&&dateRange.trim().length()>0))
               {
                   String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_MULTI_DATE_RANGE",null);
                   throw new OAException(s1,OAException.ERROR);
                  // throw new OAException("Only one of the filters : date range or history dates is allowed in addition to other search criteria.",OAException.ERROR);
               }
               if((dateRange!=null&&dateRange.trim().length()>0)&&(historyFromDate!=null||historyToDate!=null))
               {
                   String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_MULTI_DATE_RANGE",null);
                   throw new OAException(s1,OAException.ERROR);
                  // throw new OAException("Only one of the filters : date range or history dates is allowed in addition to other search criteria.",OAException.ERROR);
               }
              
               if((historyFromDate!=null&&historyToDate!=null)||(dateRange!=null&&dateRange.trim().length()>0))
               {
                   if(dateRange==null&&(historyFromDate==null||historyToDate==null))
                   {
                       throw new OAException("XXON","XXON_OM_GBW_DATE_RANGE_ERR",null, OAException.ERROR,null);
                   }
                 
                    if(historyFromDate!=null&&historyToDate!=null)
                    {
                       SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");  
                       java.util.Date fromDate = null;
                       fromDate = formatter.parse(historyFromDate.toString());
                       java.util.Date toDate = null;
                       toDate = formatter.parse(historyToDate.toString());
                       if(fromDate.getTime()>toDate.getTime())
                       {
                           String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_HISTORY_DATE_RANGE",null);
                           throw new OAException(s1,OAException.ERROR);
                       }
                       long duration  = fromDate.getTime() - toDate.getTime();
                       long Days = TimeUnit.MILLISECONDS.toDays(duration);
                       log("Days-->"+Days);
                       if(Math.abs(Days)>30)
                       {
                           String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_AUDIT_DATE_RANGE",null);
                           throw new OAException(s1,OAException.ERROR);
                           
                       }
                    }
                }else{
                    //throw new OAException("You must have to select date range either from Date Range pick list or history dates.",OAException.ERROR);
                    throw new OAException("XXON","XXON_OM_GBW_DATE_RANGE_ERR",null, OAException.ERROR,null);
               }
                if(historyFromDate!=null&&historyToDate!=null)
                {
                    historyFromDateToString=domainDateToString(historyFromDate);
                    historyToDateToString=domainDateToString(historyToDate);
                }
             
               XXONGbwAuditHeaderVOImpl auditResultVO=getXXONGbwAuditHeaderVO1();
               auditResultVO.setWhereClause(null);
               auditResultVO.setWhereClauseParams(null);
               auditResultVO.setFullSqlMode(auditResultVO.FULLSQL_MODE_AUGMENTATION);             
              
           if(auditGroupName.equalsIgnoreCase("auditSo"))
            {
               String finalAuditSoQuery=null;               
               String frExistsCondition=null;
               String soExistsCondition=null;
               String soLineExistsCondition=null;
               String bohExistsCondition=null;
               String bolExistsCondition=null;
               String existsSOConditionNew=null; // added by kishore
               String existsSOLineConditionNew=null; // added by kishore
              if(demandType!=null&&demandType.trim().length()>0) 
              {
                   javaBindNum++;
                 if(demandType.toUpperCase().equalsIgnoreCase("FR"))
                  {
                      frExistsCondition=existsCondition("XXON_OM_FCST_RESERVATIONS",userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                      finalAuditSoQuery=auditFrstQuery+frExistsCondition;                     
                      auditResultVO.setQuery(finalAuditSoQuery);
                      auditResultVO.setWhereClause("1=1");
                  }else if(demandType.equalsIgnoreCase("Order Header"))
                  {
                      soExistsCondition=existsSoCondition(userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                      existsSOConditionNew=existsSoConditionNew(userName,dateRange,historyFromDateToString,historyToDateToString,opn,"orderHeader"); // added by kishore
                      finalAuditSoQuery=auditOrderQuery+soExistsCondition+existsSOConditionNew;
                      auditResultVO.setQuery(finalAuditSoQuery);
                      auditResultVO.setWhereClause("1=1");                      
                  }else if(demandType.equalsIgnoreCase("Order Line"))
                  {
                      soLineExistsCondition=existsSoLineCondition(userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                      existsSOLineConditionNew=existsSoConditionNew(userName,dateRange,historyFromDateToString,historyToDateToString,opn,"orderLine");// added by kishore
                      finalAuditSoQuery=auditOrderLineQuery+soLineExistsCondition+existsSOLineConditionNew;
                      auditResultVO.setQuery(finalAuditSoQuery);
                      auditResultVO.setWhereClause("1=1");                      
                  }else if(demandType.toUpperCase().equalsIgnoreCase("Staged Header")){  
                      bohExistsCondition=existsCondition("XXON_OM_BOP_HEADERS_STG",userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                      finalAuditSoQuery=auditBopHeaderQuery+bohExistsCondition;
                      auditResultVO.setQuery(finalAuditSoQuery);
                      auditResultVO.setWhereClause("1=1");    
                  }else if(demandType.toUpperCase().equalsIgnoreCase("Staged Line"))
                  {  
                      bolExistsCondition=existsCondition("XXON_OM_BOP_LINES_STG",userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                      finalAuditSoQuery=auditBopLinesQuery+bolExistsCondition;
                      auditResultVO.setQuery(finalAuditSoQuery);
                      auditResultVO.setWhereClause("1=1");
                  }
               }else{
                    existsSOConditionNew=existsSoConditionNew(userName,dateRange,historyFromDateToString,historyToDateToString,opn,"orderHeader"); // added by kishore
                    existsSOLineConditionNew=existsSoConditionNew(userName,dateRange,historyFromDateToString,historyToDateToString,opn,"orderLine");// added by kishore
                   frExistsCondition=existsCondition("XXON_OM_FCST_RESERVATIONS",userName,dateRange,historyFromDateToString,historyToDateToString,opn);
                   soExistsCondition=existsSoCondition(userName,dateRange,historyFromDateToString,historyToDateToString,opn)+existsSOConditionNew; // added by kishore
                   soLineExistsCondition=existsSoLineCondition(userName,dateRange,historyFromDateToString,historyToDateToString,opn)+existsSOLineConditionNew;// added by kishore
                   bohExistsCondition=existsCondition("XXON_OM_BOP_HEADERS_STG",userName,dateRange,historyFromDateToString,historyToDateToString,null); //opn not applicable at bop headers table
                   bolExistsCondition=existsCondition("XXON_OM_BOP_LINES_STG",userName,dateRange,historyFromDateToString,historyToDateToString,opn);                   
                   finalAuditSoQuery=auditFrstQuery+frExistsCondition          +" UNION ALL "
                                     +auditOrderQuery+soExistsCondition        +" UNION "
                                     +auditOrderLineQuery+soLineExistsCondition+" UNION ALL "
                                     +auditBopHeaderQuery+bohExistsCondition   +" UNION "
                                     +auditBopLinesQuery+bolExistsCondition;
                   auditResultVO.setQuery(finalAuditSoQuery);
                   auditResultVO.setWhereClause("1=1");
               }
               if(corpCode!=null&&corpCode.trim().length()>0)
               {
                  if(corpCode.contains("%"))
                  {
                       javaBindNum++;  
                       auditResultVO.addWhereClause(" AND CORP_CODE LIKE :"+javaBindNum);
                       auditResultVO.setWhereClauseParam(javaBindNum-1,corpCode);
                  }else{
                      javaBindNum++;  
                      auditResultVO.addWhereClause(" AND CORP_CODE =:"+javaBindNum);
                      auditResultVO.setWhereClauseParam(javaBindNum-1,corpCode);
                  }
               }
               if(cust5Code!=null&&cust5Code.trim().length()>0)
               {
                if(cust5Code.contains("%"))
                {
                   javaBindNum++;  
                   auditResultVO.addWhereClause(" AND CUST5_CODE LIKE :"+javaBindNum);
                   auditResultVO.setWhereClauseParam(javaBindNum-1,cust5Code);
                }else{
                    javaBindNum++;  
                    auditResultVO.addWhereClause(" AND CUST5_CODE =:"+javaBindNum);
                    auditResultVO.setWhereClauseParam(javaBindNum-1,cust5Code);
                 }
               }
               
               if(orderNumber!=null&&orderNumber.trim().length()>0)
               {
                if(orderNumber.contains("%"))
                {
                   javaBindNum++;  
                    auditResultVO.addWhereClause(" AND ORDER_NUMBER LIKE :"+javaBindNum);
                   auditResultVO.setWhereClauseParam(javaBindNum-1,orderNumber);
                }else{
                    javaBindNum++;  
                    auditResultVO.addWhereClause(" AND ORDER_NUMBER = :"+javaBindNum);
                    auditResultVO.setWhereClauseParam(javaBindNum-1,orderNumber);
                }
               }
           }else if(auditGroupName.equalsIgnoreCase("auditSc"))
           {
               String finalauditSchCtrlQuery=null;
               String schExistsCondition=null;
               schExistsCondition=existsCondition("XXON_OM_SCH_CONTROLS",userName,dateRange,historyFromDateToString,historyToDateToString,opn);
               finalauditSchCtrlQuery=auditSchCtrlQuery+schExistsCondition;
               auditResultVO.setQuery(finalauditSchCtrlQuery);
               auditResultVO.setWhereClause("1=1");
               if(pkgCode!=null&&pkgCode.trim().length()>0)
               {
                 if(pkgCode.contains("%"))
                 {
                   javaBindNum++;  
                   auditResultVO.addWhereClause(" AND PACKAGE_CD LIKE :"+javaBindNum);
                   auditResultVO.setWhereClauseParam(javaBindNum-1,pkgCode);
                 }else{
                     javaBindNum++;  
                     auditResultVO.addWhereClause(" AND PACKAGE_CD= :"+javaBindNum);
                     auditResultVO.setWhereClauseParam(javaBindNum-1,pkgCode);
                 }
               }
               
               if(pal!=null&&pal.trim().length()>0)
               {
                 if(pal.trim().length()>3)
                 {
                     javaBindNum++;  
                     auditResultVO.addWhereClause(" AND PAL = :"+javaBindNum);
                     auditResultVO.setWhereClauseParam(javaBindNum-1,pal);
                 } else if(pal.trim().length()==3)
                 {
                        javaBindNum++;  
                        auditResultVO.addWhereClause(" AND SUBSTR(PAL,0,3) = :"+javaBindNum);
                        auditResultVO.setWhereClauseParam(javaBindNum-1,pal);
                 }else if(pal.trim().length()==2)
                 {
                     javaBindNum++;  
                     auditResultVO.addWhereClause(" AND SUBSTR(PAL,0,2) = :"+javaBindNum);
                     auditResultVO.setWhereClauseParam(javaBindNum-1,pal);
                 }else{
                     throw new OAException("PAL ("+pal+") Invalid value.",OAException.ERROR);
                 }
               }
         
           }           

           log("javaBindNum-->"+javaBindNum);  
           log("javaOthBindNum-->"+javaOthBindNum);  
          
            if(javaBindNum>0||javaOthBindNum>0)
               {
                  auditResultVO.executeQuery();
                  utils.showMaxFecthSizeWarningMsg(getOADBTransaction(),"XXONGbwAuditHeaderVO1");
                  executeAuditDetails(null,null,"N",null);
                  log("getRowCount-->"+auditResultVO.getRowCount());
                  log("Query-->"+auditResultVO.getQuery());
                  auditResultVO.setRangeStart(0);
            }else{
                  throw new OAException("XXON","XXON_OM_GBW_AUDIT_SEARCH_ERR",null, OAException.ERROR,null);
                }
           }catch(OAException exception){
                           throw exception;
                       }catch(Exception exception){
                         log("getMessage-->"+exception.getMessage());
                           throw new OAException("Error while preparing sql statement -->"+exception.getMessage(),OAException.ERROR);
                       }
       }
  
    public void executeAuditDetails(String orderNumber,String headerId,String clearVO,String auditLevel)
    {
        log("start of executeAuditDetails");
        log("orderNumber-->"+orderNumber);
        log("headerId-->"+headerId);
        log("clearVO-->"+clearVO);
        log("auditLevel-->"+auditLevel);
        if(clearVO!=null&&clearVO.equalsIgnoreCase("N"))
        {
            XXONGbwAuditResultVOImpl auditResultVO=getXXONGbwAuditResultVO1();
            auditResultVO.setWhereClause(null);
            auditResultVO.setWhereClauseParams(null);
            auditResultVO.setWhereClause("1=2");
            auditResultVO.executeQuery();
        
        }else{
            XXONGbwAuditResultVOImpl auditResultVO=getXXONGbwAuditResultVO1();
            auditResultVO.setWhereClause(null);
            auditResultVO.setWhereClauseParams(null);
            auditResultVO.setFullSqlMode(auditResultVO.FULLSQL_MODE_AUGMENTATION); 
          if(auditLevel!=null&&auditLevel.trim().length()>0)
          {
            if(auditLevel.equalsIgnoreCase("FR"))
            {
                auditResultVO.setQuery(frLineQuery);
            }else if(auditLevel.equalsIgnoreCase("Order Header")){
                auditResultVO.setQuery(soLineQuery);
            }else if(auditLevel.equalsIgnoreCase("Order Line")){
                auditResultVO.setQuery(soLineQuery);
            }else if(auditLevel.equalsIgnoreCase("Staged Header")){
                auditResultVO.setQuery(bohLineQuery);
            }else if(auditLevel.equalsIgnoreCase("Staged Line")){
                auditResultVO.setQuery(bolLineQuery);
            }else if(auditLevel.equalsIgnoreCase("Scheduling Control")){
                auditResultVO.setQuery(schLineQuery);
            }
          }
        auditResultVO.setWhereClause("1=1");        
        int javaBindNumber=0;        
        if(orderNumber!=null&&orderNumber.trim().length()>0)
        {
             javaBindNumber++;  
             auditResultVO.addWhereClause(" AND ORDER_NUMBER = :"+javaBindNumber);
             auditResultVO.setWhereClauseParam(javaBindNumber-1,orderNumber.toUpperCase());
             
        }
        if(headerId!=null&&headerId.trim().length()>0)
        {
            javaBindNumber++;  
            auditResultVO.addWhereClause(" AND HEADER_ID = :"+javaBindNumber);
            auditResultVO.setWhereClauseParam(javaBindNumber-1,headerId);
        }
       if(javaBindNumber>0)
        {
            auditResultVO.executeQuery();
            log(" audit detail Query-->"+auditResultVO.getQuery());
        }
      }
    }
public void exeAuditDetlByLineNum(String lineNumber)
{
    log("start of exeAuditDetlByLineNum -->");
    log("lineNumber-->"+lineNumber);
    XXONGbwAuditResultVOImpl auditResultVO=getXXONGbwAuditResultVO1();
    String orderNumber=null;
    if(auditResultVO.getFetchedRowCount()>0)
    {
       XXONGbwAuditResultVORowImpl row=(XXONGbwAuditResultVORowImpl)auditResultVO.first();
        orderNumber=row.getOrderNumber();
    }
    auditResultVO.setWhereClause(null);
    auditResultVO.setWhereClauseParams(null);    
    if(lineNumber!=null&&lineNumber.trim().length()>0)
    {
        auditResultVO.setWhereClause(" LINE_NUMBER = :1 AND ORDER_NUMBER=:2");
        auditResultVO.setWhereClauseParam(0,lineNumber);
        auditResultVO.setWhereClauseParam(1,orderNumber);
        auditResultVO.executeQuery();
        log("auditHeaderVO Query-->"+auditResultVO.getQuery());
        auditResultVO.setRangeStart(0);
    }

}

  public String existsCondition(String auditLevel,String userName,String dateRange,String historyFromDateToString,String historyToDateToString,String opn)
  {   
     // int invItemId=0;
     
      StringBuffer existsClause = new StringBuffer();
      String existsClauseStr = null;            
         
        if(opn!=null&&opn.trim().length()>0)
        {
            if(auditLevel!=null && auditLevel.equals("XXON_OM_FCST_RESERVATIONS"))
            {
                existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from XXON_OM_AUDIT_ATTR_HISTORY OAAH,FND_USER FU,MTL_SYSTEM_ITEMS_B MSIB,XXON_OM_FCST_RESERVATIONS XOFR WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
            }
            else{
                existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from XXON_OM_AUDIT_ATTR_HISTORY OAAH,FND_USER FU,MTL_SYSTEM_ITEMS_B MSIB WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
            }
        }else{
            existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from XXON_OM_AUDIT_ATTR_HISTORY OAAH,FND_USER FU WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
        }
         
         existsClause.append(" AND OAAH.ENTITY_NAME = '"+auditLevel+"' AND OAAH.ENTITY_KEY = XOGA.HEADER_ID");                   
         if (userName!=null && userName.trim().length()>0)
         {
             //javaBindNum++; 
             javaOthBindNum++;
             existsClause.append(" AND FU.USER_NAME = '");
             existsClause.append(userName);
             existsClause.append("'");
         }                   
         if (dateRange!=null&&dateRange.trim().length()>0){
             //javaBindNum++; 
             existsClause.append(" AND OAAH.HIST_CREATION_DATE BETWEEN  SYSDATE-");
             existsClause.append(dateRange);
             existsClause.append(" AND SYSDATE");
         }else if(historyFromDateToString!=null&&historyToDateToString!=null) {
            // javaBindNum++; 
             existsClause.append(" AND TRUNC(OAAH.HIST_CREATION_DATE) BETWEEN TO_DATE('");
             existsClause.append(historyFromDateToString);
             existsClause.append("','RRRR-MM-DD') AND TO_DATE('");
             existsClause.append(historyToDateToString);
             existsClause.append("','RRRR-MM-DD')");
         }
         //include OPN JOIN in exists clause
          if(opn!=null&&opn.trim().length()>0)
          {
              if(auditLevel!=null && auditLevel.equals("XXON_OM_FCST_RESERVATIONS")){
                  existsClause.append(" AND XOFR.RESERVTN_ID = XOGA.HEADER_ID");
                  existsClause.append(" AND MSIB.SEGMENT1 = XOFR.MPN");
              }else{
                  existsClause.append(" AND MSIB.INVENTORY_ITEM_ID = XOGA.INVENTORY_ITEM_ID");
              }

              existsClause.append(" AND MSIB.ORGANIZATION_ID = 195");
              existsClause.append(" AND MSIB.SEGMENT1 = '");
              existsClause.append(opn);
              existsClause.append("'");
              //javaBindNum++; 
              javaOthBindNum++;
          }
          existsClause.append(")");
          existsClauseStr = existsClause.toString(); 
          
         return existsClauseStr;
  }
   public String existsSoCondition(String userName,String dateRange,String historyFromDateToString,String historyToDateToString,String opn)
    {   
       // int invItemId=0;
        StringBuffer existsClause = new StringBuffer();
        String existsClauseStr = null;         
        if(opn!=null&&opn.trim().length()>0){
            existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from OE_AUDIT_ATTR_HISTORY OAAH,FND_USER FU,MTL_SYSTEM_ITEMS_B MSIB,OE_ORDER_LINES_ALL OOLA WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
        }else{
            existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from OE_AUDIT_ATTR_HISTORY OAAH,FND_USER FU WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
        }
            
            existsClause.append(" AND OAAH.entity_number = XOGA.header_id");
            existsClause.append(" AND to_char(OAAH.order_number) = XOGA.order_number");  
                 
           if (userName!=null && userName.trim().length()>0)
           {
              // javaBindNum++; 
               javaOthBindNum++;
               existsClause.append(" AND FU.USER_NAME = '");
               existsClause.append(userName);
               existsClause.append("'");
           }                   
           if (dateRange!=null&&dateRange.trim().length()>0){
               //javaBindNum++; 
               existsClause.append(" AND OAAH.HIST_CREATION_DATE BETWEEN  SYSDATE-");
               existsClause.append(dateRange);
               existsClause.append(" AND SYSDATE");
           }else if(historyFromDateToString!=null&&historyToDateToString!=null) {
              // javaBindNum++; 
               existsClause.append(" AND TRUNC(OAAH.HIST_CREATION_DATE) BETWEEN TO_DATE('");
               existsClause.append(historyFromDateToString);
               existsClause.append("','RRRR-MM-DD') AND TO_DATE('");
               existsClause.append(historyToDateToString);
               existsClause.append("','RRRR-MM-DD')");
           }
            
            if(opn!=null&&opn.trim().length()>0)
            {
                existsClause.append(" AND XOGA.HEADER_ID = OOLA.HEADER_ID");
                existsClause.append(" AND MSIB.INVENTORY_ITEM_ID = OOLA.INVENTORY_ITEM_ID");
                existsClause.append(" AND MSIB.ORGANIZATION_ID = 195");
                existsClause.append(" AND MSIB.SEGMENT1 = '");
                existsClause.append(opn);
                existsClause.append("'");
               // javaBindNum++;  
                 javaOthBindNum++;
             }
        
             existsClause.append(")");
             existsClauseStr = existsClause.toString(); 
           return existsClauseStr;
    }
  public String existsSoLineCondition(String userName,String dateRange,String historyFromDateToString,String historyToDateToString,String opn)
    {   
       // int invItemId=0;
        StringBuffer existsClause = new StringBuffer();
        String existsClauseStr = null;         
        if(opn!=null&&opn.trim().length()>0){
            existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from OE_AUDIT_ATTR_HISTORY OAAH,FND_USER FU,MTL_SYSTEM_ITEMS_B MSIB,OE_ORDER_LINES_ALL OOLA WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
        }else{
            existsClause.append(" WHERE 1=1 AND EXISTS ( SELECT 1 from OE_AUDIT_ATTR_HISTORY OAAH,FND_USER FU WHERE 1=1 AND OAAH.USER_ID = FU.USER_ID ");
        }
            
            existsClause.append(" AND OAAH.entity_number = XOGA.header_id");
            existsClause.append(" AND to_char(OAAH.order_number) = XOGA.order_number");  
                 
           if (userName!=null && userName.trim().length()>0)
           {
              // javaBindNum++; 
               javaOthBindNum++;
               existsClause.append(" AND FU.USER_NAME = '");
               existsClause.append(userName);
               existsClause.append("'");
           }                   
           if (dateRange!=null&&dateRange.trim().length()>0){
               //javaBindNum++; 
               existsClause.append(" AND OAAH.HIST_CREATION_DATE BETWEEN  SYSDATE-");
               existsClause.append(dateRange);
               existsClause.append(" AND SYSDATE");
           }else if(historyFromDateToString!=null&&historyToDateToString!=null) {
              // javaBindNum++; 
               existsClause.append(" AND TRUNC(OAAH.HIST_CREATION_DATE) BETWEEN TO_DATE('");
               existsClause.append(historyFromDateToString);
               existsClause.append("','RRRR-MM-DD') AND TO_DATE('");
               existsClause.append(historyToDateToString);
               existsClause.append("','RRRR-MM-DD')");
           }
            
            if(opn!=null&&opn.trim().length()>0)
            {
                existsClause.append(" AND XOGA.HEADER_ID = OOLA.LINE_ID");
                existsClause.append(" AND MSIB.INVENTORY_ITEM_ID = OOLA.INVENTORY_ITEM_ID");
                existsClause.append(" AND MSIB.ORGANIZATION_ID = 195");
                existsClause.append(" AND MSIB.SEGMENT1 = '");
                existsClause.append(opn);
                existsClause.append("'");
                //javaBindNum++;  
                 javaOthBindNum++;
             }
             existsClause.append(")");
             existsClauseStr = existsClause.toString(); 
           return existsClauseStr;
    }
    public String existsSoConditionNew(String userName,String dateRange,String historyFromDateToString,String historyToDateToString,String opn,String orderLevel)
     {   
        // int invItemId=0;
        String orderUnionQuery=null;
         if(orderLevel!=null&&orderLevel.equalsIgnoreCase("orderHeader"))
         {
             orderUnionQuery=auditOrderQuery;
         }else{
             orderUnionQuery=auditOrderLineQuery;
         }
         StringBuffer existsClause = new StringBuffer();
         String existsClauseStr = null;         
         if(opn!=null&&opn.trim().length()>0){
             existsClause.append(" UNION "+orderUnionQuery+" WHERE 1=1 AND EXISTS ( SELECT 1 from xxon_om_audit_attr_history xoah,FND_USER FU,MTL_SYSTEM_ITEMS_B MSIB,OE_ORDER_LINES_ALL OOLA WHERE 1=1 AND xoah.USER_ID = FU.USER_ID ");
         }else{
             existsClause.append(" UNION "+orderUnionQuery+" WHERE 1=1 AND EXISTS ( SELECT 1 from xxon_om_audit_attr_history xoah,FND_USER FU WHERE 1=1 AND xoah.USER_ID = FU.USER_ID ");
         }
             
             existsClause.append(" AND xoah.entity_key = XOGA.header_id");             
             if(orderLevel!=null&&orderLevel.equalsIgnoreCase("orderHeader"))
             {
               existsClause.append(" AND xoah.entity_name = 'SALES_ORDER_HEADER'");  
             }else{
               existsClause.append(" AND xoah.entity_name = 'SALES_ORDER_LINE'"); 
             }
                  
            if (userName!=null && userName.trim().length()>0)
            {
                //javaBindNum++;
                 javaOthBindNum++;
                existsClause.append(" AND FU.USER_NAME = '");
                existsClause.append(userName);
                existsClause.append("'");
            }                   
            if (dateRange!=null&&dateRange.trim().length()>0){
                //javaBindNum++; 
                existsClause.append(" AND xoah.HIST_CREATION_DATE BETWEEN  SYSDATE-");
                existsClause.append(dateRange);
                existsClause.append(" AND SYSDATE");
            }else if(historyFromDateToString!=null&&historyToDateToString!=null) {
               // javaBindNum++; 
                existsClause.append(" AND TRUNC(xoah.HIST_CREATION_DATE) BETWEEN TO_DATE('");
                existsClause.append(historyFromDateToString);
                existsClause.append("','RRRR-MM-DD') AND TO_DATE('");
                existsClause.append(historyToDateToString);
                existsClause.append("','RRRR-MM-DD')");
            }
             
             if(opn!=null&&opn.trim().length()>0)
             {
                 existsClause.append(" AND XOGA.HEADER_ID = OOLA.HEADER_ID");
                 existsClause.append(" AND MSIB.INVENTORY_ITEM_ID = OOLA.INVENTORY_ITEM_ID");
                 existsClause.append(" AND MSIB.ORGANIZATION_ID = 195");
                 existsClause.append(" AND MSIB.SEGMENT1 = '");
                 existsClause.append(opn);
                 existsClause.append("'");
                // javaBindNum++; 
                 javaOthBindNum++;
              }
         
              existsClause.append(")");
              existsClauseStr = existsClause.toString(); 
            return existsClauseStr;
     }
 
    /**
     * Below Method is to print the log messages
     *@param Message for text 
    */
    private void log(String Message)
    {
        XXONGbwUtil utils= new XXONGbwUtil();
        utils.log(Message,getOADBTransaction());      
    }
    
  

    /**Container's getter for XXONGbwCust5CodeLovVO1
     */
    public XXONGbwCust5CodeLovVOImpl getXXONGbwCust5CodeLovVO1() {
        return (XXONGbwCust5CodeLovVOImpl)findViewObject("XXONGbwCust5CodeLovVO1");
    }

    /**Container's getter for XXONGbwPackageLovVO1
     */
    public XXONGbwPackageLovVOImpl getXXONGbwPackageLovVO1() {
        return (XXONGbwPackageLovVOImpl)findViewObject("XXONGbwPackageLovVO1");
    }

    /**Container's getter for XXONGbwCorpCodeLovVO1
     */
    public XXONGbwCorpCodeLovVOImpl getXXONGbwCorpCodeLovVO1() {
        return (XXONGbwCorpCodeLovVOImpl)findViewObject("XXONGbwCorpCodeLovVO1");
    }

    /**Container's getter for XXONGbwOperatingUnitLovVO1
     */
    public XXONGbwOperatingUnitLovVOImpl getXXONGbwOperatingUnitLovVO1() {
        return (XXONGbwOperatingUnitLovVOImpl)findViewObject("XXONGbwOperatingUnitLovVO1");
    }

    /**Container's getter for XXONGbwOpnLovVO1
     */
    public XXONGbwOpnLovVOImpl getXXONGbwOpnLovVO1() {
        return (XXONGbwOpnLovVOImpl)findViewObject("XXONGbwOpnLovVO1");
    }

    /**Container's getter for XXONGbwDemandBankLovVO1
     */
    public XXONGbwDemandBankLovVOImpl getXXONGbwDemandBankLovVO1() {
        return (XXONGbwDemandBankLovVOImpl)findViewObject("XXONGbwDemandBankLovVO1");
    }


    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.xxon.om.gbw.audit.server", /* package name */
      "XXONGbwOmAuditAMLocal" /* Configuration Name */);
    }


    /**Container's getter for XXONGbwAuditResultVO1
     */
    public XXONGbwAuditResultVOImpl getXXONGbwAuditResultVO1() {
        return (XXONGbwAuditResultVOImpl)findViewObject("XXONGbwAuditResultVO1");
    }

    /**Container's getter for XXONGbwSearchValuesVO1
     */
    public XXONGbwSearchValuesVOImpl getXXONGbwSearchValuesVO1() {
        return (XXONGbwSearchValuesVOImpl)findViewObject("XXONGbwSearchValuesVO1");
    }

    /**Container's getter for XXONGbwAuditHeaderVO1
     */
    public XXONGbwAuditHeaderVOImpl getXXONGbwAuditHeaderVO1() {
        return (XXONGbwAuditHeaderVOImpl)findViewObject("XXONGbwAuditHeaderVO1");
    }


    /**Container's getter for XXONGbwAuditDetailRecDisVO1
     */
    public XXONGbwAuditDetailRecDisVOImpl getXXONGbwAuditDetailRecDisVO1() {
        return (XXONGbwAuditDetailRecDisVOImpl)findViewObject("XXONGbwAuditDetailRecDisVO1");
    }

    /**Container's getter for XXOnGbwAuditRecordDisplayVO1
     */
    public XXOnGbwAuditRecordDisplayVOImpl getXXOnGbwAuditRecordDisplayVO1() {
        return (XXOnGbwAuditRecordDisplayVOImpl)findViewObject("XXOnGbwAuditRecordDisplayVO1");
    }
}
