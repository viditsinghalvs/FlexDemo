package oracle.apps.xxon.om.gbw.schctl.server;

import java.sql.Connection;
import java.sql.PreparedStatement;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.xxon.om.gbw.baklogview.server.XXONGbwRecordsDisplayVOImpl;
import oracle.apps.xxon.om.gbw.baklogview.server.XXONGbwRecordsDisplayVORowImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPackageLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPtiLovVOImpl;
import oracle.apps.xxon.om.gbw.util.XXONGbwUtil;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XXONGbwScheCtlAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XXONGbwScheCtlAMImpl() {
    }
public int globalVoMaxFetchSize=0;
    public void recDisInit()
    {
        XXONGbwRecordsDisplayVOImpl recordsDisplayVO=getXXONGbwRecordsDisplayVO1();
        if(!recordsDisplayVO.isExecuted())
        {
            recordsDisplayVO.executeQuery();
        }
    
    }
    public void initSearchValVO()
    {
        XXONGbwSearchValuesVOImpl searchValuesVO=getXXONGbwSearchValuesVO1();
        if(!searchValuesVO.isExecuted())
        {
            searchValuesVO.executeQuery();
        }
    
    }
    public void AddScheMthd()
    {
        XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
        if(scheCtlResultVO.getFetchedRowCount()>0)
        {
            scheCtlResultVO.last();
            scheCtlResultVO.next();
            Row createRow = scheCtlResultVO.createRow();
            createRow.setAttribute("NewRow","Y");
            createRow.setAttribute("select","Y");
            scheCtlResultVO.insertRow(createRow);
            createRow.setAttribute("ReadOnlyPti",false);
            createRow.setAttribute("ReadOnlyMpn",false);
            createRow.setAttribute("ReadOnlyPkg",false);
            createRow.setAttribute("ReadOnlyOu",false);
        }else{
                   
                if(globalVoMaxFetchSize==0)
                {
                    globalVoMaxFetchSize=scheCtlResultVO.getMaxFetchSize();
                }          
                if(scheCtlResultVO.getFetchedRowCount()==0)
                {
                    scheCtlResultVO.setMaxFetchSize(0);  
                }            
                    Row createRow=scheCtlResultVO.createRow();
                    createRow.setAttribute("NewRow","Y");
                    createRow.setAttribute("select","Y");
                    scheCtlResultVO.insertRow(createRow); 
                    createRow.setAttribute("ReadOnlyPti",false);
                    createRow.setAttribute("ReadOnlyMpn",false);
                    createRow.setAttribute("ReadOnlyPkg",false);
                    createRow.setAttribute("ReadOnlyOu",false);
                       
        }
        
    }
 public void executeResultVO(String callingFrom)
    {
       log("start of executeResultVO");
       log("callingFrom-->"+callingFrom);
    try{
         int    totalRows=0;
     XXONGbwSearchValuesVOImpl searchValuesVO=getXXONGbwSearchValuesVO1();
        XXONGbwSearchValuesVORowImpl row=(XXONGbwSearchValuesVORowImpl)searchValuesVO.first();
        String opn=null;
        String pti=null;
        String pkg=null;
              
        opn=row.getOpn();
        pti=row.getPti();
        pkg=row.getPkg();
        
          log("opn-->"+opn);
          log("pti-->"+pti);
          log("pkg-->"+pkg);
      if(pti!=null&&pti.trim().length()>0&&pti.contains("%"))
      {
         throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR1",null,OAException.ERROR,null);
      }
        if(opn==null&&pti==null&&pkg==null)
        {
            if(callingFrom!=null&&!callingFrom.equalsIgnoreCase("PR"))
            {
                throw new OAException("XXON","XXON_OM_GBW_SEARCH_ERR",
                                                 null,//tokens,
                                                 OAException.ERROR,
                                                 null);
            }
        }else{
            XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
            scheCtlResultVO.setWhereClauseParams(null);
            int javaBindNum=0;
            scheCtlResultVO.setWhereClause("1=1");
             if(opn!=null&&opn.trim().length()>0)
             {
             if(opn.contains("%"))
             {
                 javaBindNum++;
                 scheCtlResultVO.addWhereClause(" AND OPN LIKE :"+javaBindNum);
                 scheCtlResultVO.setWhereClauseParam(javaBindNum-1,opn.toUpperCase());
             }else{
                 javaBindNum++;
                 scheCtlResultVO.addWhereClause(" AND OPN = :"+javaBindNum);
                 scheCtlResultVO.setWhereClauseParam(javaBindNum-1,opn.toUpperCase());
             }
             }
             if(pti!=null&&pti.trim().length()>0)
             {
              if(pti.trim().length()>3)
              {
                  javaBindNum++;
                  scheCtlResultVO.addWhereClause(" AND PTI = :"+javaBindNum);
                  scheCtlResultVO.setWhereClauseParam(javaBindNum-1,pti);
              } else if(pti.trim().length()==3)
              {
                  javaBindNum++;
                  scheCtlResultVO.addWhereClause(" AND SUBSTR(PTI,0,3) = :"+javaBindNum);
                  scheCtlResultVO.setWhereClauseParam(javaBindNum-1,pti);
              } else if(pti.trim().length()==2)
              {
                  javaBindNum++;
                  scheCtlResultVO.addWhereClause(" AND SUBSTR(PTI,0,2) = :"+javaBindNum);
                  scheCtlResultVO.setWhereClauseParam(javaBindNum-1,pti);
              }
             }
             if(pkg!=null&&pkg.trim().length()>0)
             {
              if(pkg.contains("%"))
              {
               javaBindNum++;
               scheCtlResultVO.addWhereClause(" AND PKG LIKE :"+javaBindNum);
               scheCtlResultVO.setWhereClauseParam(javaBindNum-1,pkg.toUpperCase());
              }else{
                  javaBindNum++;
                  scheCtlResultVO.addWhereClause(" AND PKG = :"+javaBindNum);
                  scheCtlResultVO.setWhereClauseParam(javaBindNum-1,pkg.toUpperCase());
              }
             }
            if(javaBindNum>0)
            {
              log("globalVoMaxFetchsize-->"+globalVoMaxFetchSize);
              if(globalVoMaxFetchSize==0)
              {
                  globalVoMaxFetchSize=scheCtlResultVO.getMaxFetchSize();
              }
               if(scheCtlResultVO.getMaxFetchSize()==0)
               {
                   log("globalVoMaxFetchsize-->"+globalVoMaxFetchSize);
                   scheCtlResultVO.setMaxFetchSize(globalVoMaxFetchSize);
               }
                scheCtlResultVO.executeQuery();
                totalRows=makeReadOnly();
                log("Query-->"+scheCtlResultVO.getQuery());
                XXONGbwRecordsDisplayVOImpl recordsDisplayVO=getXXONGbwRecordsDisplayVO1();
                XXONGbwRecordsDisplayVORowImpl row1=(XXONGbwRecordsDisplayVORowImpl)recordsDisplayVO.first();
                row1.setAttribute("recCount",totalRows+" Record(s) found.");
                scheCtlResultVO.setRangeStart(0);
          }
         }
          } catch(OAException exception)
                 {
                      throw exception;
                  }catch(Exception exception)
                  {
                      throw new OAException("Error while constructing excecution statement-->"+exception.getMessage(),OAException.ERROR);
                  }
      }
      public void DeleteRecord()
      {
      
       try{
          XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
            if(scheCtlResultVO.getFetchedRowCount()<=0)
                {
                  String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
                  throw new OAException(s1,OAException.ERROR);
                }
          XXONGbwScheCtlResultVORowImpl selectedRow=null;
          Row[] rows = scheCtlResultVO.getFilteredRows("select", "Y");
          if(rows.length<=0)
          {
              String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_RECORD_SELECT_DEL",null);
              throw new OAException(s1,OAException.ERROR);
          }
            
            int userId=getOADBTransaction().getUserId();
            int lastUpdateLogin=getOADBTransaction().getLoginId(); 
            String nFlag="N";
            Boolean isUpdate=false;
            String deleteQuery = "UPDATE XXON_OM_SCH_CONTROLS SET ENABLED_FLAG=:1 ,\n" + 
                                  "LAST_UPDATE_DATE=SYSDATE,LAST_UPDATED_BY=:2, LAST_UPDATE_LOGIN=:3 WHERE SCH_CONTROL_ID=:4";
            Connection conn = getOADBTransaction().getJdbcConnection();
            PreparedStatement pStatement = conn.prepareStatement(deleteQuery);
            conn.setAutoCommit(false);
            for (int i = 0; i < rows.length; i++)
               {
                   selectedRow = (XXONGbwScheCtlResultVORowImpl)rows[i];
                   String newRow=null;
                   newRow=selectedRow.getNewRow();
                   log("NewRow-->"+newRow);                  
                   if(newRow!=null&&newRow.equals("N"))
                   {
                       String schedulingMethod=null;
                       Number schControlId=null;            
                       schedulingMethod=selectedRow.getSchedulingMethod();  
                       schControlId=selectedRow.getSchControlId();
                       pStatement.setString(1,nFlag);
                       pStatement.setInt(2,userId);
                       pStatement.setInt(3,lastUpdateLogin);
                       pStatement.setInt(4,Integer.parseInt(schControlId.toString()));
                       pStatement.addBatch();
                       isUpdate=true;
                       selectedRow.remove();
                   }else if(newRow!=null&&newRow.equals("Y"))
                   {
                       selectedRow.remove();
                       isUpdate=false;
                   }
                
               }
            if (isUpdate)
            {
                pStatement.executeBatch();
                conn.commit();
                pStatement.close();
                conn.close();
            }
        }catch (OAException exp)
        {
             throw exp;
        }catch (Exception Exp)
        {
            throw new OAException("Error while delete scheduling control::"+Exp.getMessage(),OAException.ERROR);
        }
      }
   public void updateSchMethod()
    {
    try{
        XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
        if(scheCtlResultVO.getFetchedRowCount()<=0)
            {
                String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
                throw new OAException(s1,OAException.ERROR);
            }
        XXONGbwScheCtlResultVORowImpl selectedRows=null;
        Row[] rows = scheCtlResultVO.getFilteredRows("select", "Y");
        if(rows.length<=0)
        {
            throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",
                                             null,//tokens,
                                             OAException.ERROR,
                                             null);
        }
        
        int userId=getOADBTransaction().getUserId();
        int lastUpdateLogin=getOADBTransaction().getLoginId();        
        Boolean isUpdate=false;
        Boolean isInsert=false;  
        String enableFlag="Y";
        String InsertQuery="INSERT INTO XXON_OM_SCH_CONTROLS(SCH_CONTROL_ID,ORG_ID,PTI,INVENTORY_ITEM_ID,PACKAGE_CD,SCHEDULING_METHOD,\n" + 
               " ENABLED_FLAG,CREATED_BY,LAST_UPDATED_BY,CREATION_DATE,LAST_UPDATE_DATE,LAST_UPDATE_LOGIN,REQUEST_ID) VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,SYSDATE,SYSDATE,:10,:11)";
        String updateQuery = "UPDATE XXON_OM_SCH_CONTROLS SET SCHEDULING_METHOD=:1 ,\n" + 
                              "LAST_UPDATE_DATE=SYSDATE,LAST_UPDATED_BY=:2, LAST_UPDATE_LOGIN=:3 WHERE SCH_CONTROL_ID=:4";
        Connection conn = getOADBTransaction().getJdbcConnection();
        PreparedStatement pStatement = conn.prepareStatement(updateQuery);
        PreparedStatement insertStatement = conn.prepareStatement(InsertQuery);
        conn.setAutoCommit(false);
    for (int i = 0; i < rows.length; i++)
        {
            selectedRows = (XXONGbwScheCtlResultVORowImpl)rows[i];
            String newRow=null;
            newRow=selectedRows.getNewRow();
            log("NewRow-->"+newRow);
            
            if(newRow!=null&&newRow.equals("N"))
            {
                String SchedulingMethod=null;
                Number SchControlId=null;            
                SchedulingMethod=selectedRows.getSchedulingMethod();  
                SchControlId=selectedRows.getSchControlId();
                // add to statement
                pStatement.setString(1,SchedulingMethod);
                pStatement.setInt(2,userId);
                pStatement.setInt(3,lastUpdateLogin);
                pStatement.setInt(4,Integer.parseInt(SchControlId.toString()));
                pStatement.addBatch();
                isUpdate=true;
            }else if(newRow!=null&&newRow.equals("Y"))
            {

                 String inventoryItemId =null;
                 String pkg             =null;
                 String pti             =null;
                 String scheMthd        =null;
                 String opn             =null;
                 
               inventoryItemId=selectedRows.getInventoryItemId1();            
               pkg=selectedRows.getPkg();
               pti=selectedRows.getPti();
              scheMthd = selectedRows.getSchedulingMethod();
              opn=selectedRows.getOpn();
          if(inventoryItemId==null&&pkg==null&&pti==null)
            {
             // throw new OAException("Please enter atleast one value to create auto schedule method",OAException.ERROR);
                throw new OAException("XXON","XXON_OM_GBW_SCHCTL_VALUE_ERR",
                                                 null,//tokens,
                                                 OAException.ERROR,
                                                 null);
            }
            
          chekcDuplicateValues(pti,pkg,inventoryItemId,opn);// duplicate validation method
          
             oracle.jbo.domain.Number SchCtrlId=getOADBTransaction().getSequenceValue("XXON_OM_SCH_CONTROLS_S");
                insertStatement.setInt(1,Integer.parseInt(SchCtrlId.toString()));
                insertStatement.setString(2,null);
                insertStatement.setString(3,pti);
                insertStatement.setString(4,inventoryItemId);
                insertStatement.setString(5,pkg);
                insertStatement.setString(6,scheMthd);
                insertStatement.setString(7,enableFlag);
                insertStatement.setInt(8,userId);
                insertStatement.setInt(9,userId);
                insertStatement.setInt(10,lastUpdateLogin);
                insertStatement.setInt(11,0);
                insertStatement.addBatch();
                isInsert=Boolean.TRUE;
                 log("SchCtrlId-->"+SchCtrlId);
             }
         
        }
          if (isUpdate)
           {
               pStatement.executeBatch();
               conn.commit();
               pStatement.close();
               
          }
          
          if(isInsert)
          {
              log("SchCtrlId2-->");
              insertStatement.executeBatch();
              conn.commit();
              insertStatement.close();
          }else{
            log("no update or delete");
          }
          conn.close();
      }catch(OAException exception)
               {
                    throw exception;
                }catch(Exception exception)
                {
                    throw new OAException("Error while save data -->"+exception.getMessage(),OAException.ERROR);
                }
    }
    public void chekcDuplicateValues(String pal,String pkg,String invId,String opn)
    {
        log("start of chekcDuplicateValues-->");        
        log("pal-->"+pal);
        log("pkg-->"+pkg);
        log("invId-->"+invId);        
        int palCount=0;
        int opnCount=0;
        int pkgCount=0;
        int palPkgCount=0;
        XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
        XXONGbwScheCtlResultVORowImpl selectedRows=null;
        int fetchedRowCount=scheCtlResultVO.getRowCount();
        if(fetchedRowCount>0)
        {
            RowSetIterator deleteIter = scheCtlResultVO.createRowSetIterator("deleteIter");
            deleteIter.setRangeStart(0);  
            deleteIter.setRangeSize(fetchedRowCount);
        for (int i = 0; i < fetchedRowCount; i++)
           {
               selectedRows = (XXONGbwScheCtlResultVORowImpl)deleteIter.getRowAtRangeIndex(i);
               //String IorgId=selectedRows.getOrgId();
               String Ipal=selectedRows.getPti();
               String IInvId=selectedRows.getInventoryItemId1();
               String Ipkg=selectedRows.getPkg();
               log("Ipal-->"+Ipal);
               log("Ipkg-->"+Ipkg);
               log("IinvId-->"+IInvId);
              
               
               if(IInvId!=null&&invId!=null&&(IInvId.equalsIgnoreCase(invId)))                 
               {
                 opnCount++;
                   if(opnCount>1)
                   {
                       MessageToken[] tokens = { new MessageToken("COLUMNVAL", opn)};
                        throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                               tokens,//tokens,
                                                               OAException.ERROR,
                                                               null);
                   }
               }
               
               if(Ipkg!=null&&pkg!=null&&(Ipkg.equalsIgnoreCase(pkg))&&Ipal!=null&&pal!=null&&(Ipal.equalsIgnoreCase(pal)))
               {
                   palPkgCount++;
                   if(palPkgCount>1)
                   {
                   MessageToken[] tokens = { new MessageToken("COLUMNVAL", "PTI("+pal+") and PKG Group Code("+pkg+") combination")};
                    throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                           tokens,//tokens,
                                                           OAException.ERROR,
                                                           null);
                   }
               }else{
                   if(Ipkg==null&&Ipal!=null&&pal!=null&&(Ipal.equalsIgnoreCase(pal)))                 
                   {
                     palCount++;
                       if(palCount>1)
                       {
                           MessageToken[] tokens = { new MessageToken("COLUMNVAL", pal)};
                            throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                                   tokens,//tokens,
                                                                   OAException.ERROR,
                                                                   null);
                       }
                   }
                   if(Ipal==null&&Ipkg!=null&&pkg!=null&&(Ipkg.equalsIgnoreCase(pkg)))                 
                   {
                     pkgCount++;
                       if(pkgCount>1)
                       {
                           MessageToken[] tokens = { new MessageToken("COLUMNVAL", pkg)};
                            throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                                   tokens,//tokens,
                                                                   OAException.ERROR,
                                                                   null);
                       }
                   }
               }
           }
        }
       
        
        XXONGbwScheDuplicateCheckVOImpl duplicateCheckVO=getXXONGbwScheDuplicateCheckVO1();
         duplicateCheckVO.setFullSqlMode(duplicateCheckVO.FULLSQL_MODE_AUGMENTATION);
         duplicateCheckVO.setWhereClauseParams(null);
      String query=null;
       if(invId!=null&&invId.trim().length()>0)// OPN check
        {
            query="SELECT   COUNT ( * ) REC_COUNT" + 
                    "  FROM   XXON_OM_SCH_CONTROLS " +
                    "WHERE ENABLED_FLAG='Y' " +
                    "AND INVENTORY_ITEM_ID=:1";   
                duplicateCheckVO.setQuery(query);          
            duplicateCheckVO.setWhereClauseParam(0,invId);
            duplicateCheckVO.executeQuery();
            XXONGbwScheDuplicateCheckVORowImpl row=(XXONGbwScheDuplicateCheckVORowImpl)duplicateCheckVO.first();
             Number recCount=row.getRecCount();
             log("recCount-->"+recCount);
             if(recCount!=null&&recCount.intValue()>0)
             {
                 MessageToken[] tokens = { new MessageToken("COLUMNVAL", opn)};
                  throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                         tokens,//tokens,
                                                         OAException.ERROR,
                                                         null);
             }
        }else if(pkg!=null&&pkg.trim().length()>0&&pal!=null&&pal.trim().length()>0)
        {
            query="SELECT   COUNT ( * ) REC_COUNT" + 
                    "  FROM   XXON_OM_SCH_CONTROLS " +
                    "WHERE ENABLED_FLAG='Y' " +                   
                    "AND UPPER(PACKAGE_CD)=UPPER(:1) "+
                    "AND UPPER(PTI)=UPPER(:2)";   
                duplicateCheckVO.setQuery(query);    
            
            duplicateCheckVO.setWhereClauseParam(0,pkg);
            duplicateCheckVO.setWhereClauseParam(1,pal);
            duplicateCheckVO.executeQuery();
            XXONGbwScheDuplicateCheckVORowImpl row=(XXONGbwScheDuplicateCheckVORowImpl)duplicateCheckVO.first();
             Number recCount=row.getRecCount();
             log("recCount-->"+recCount);
             if(recCount!=null&&recCount.intValue()>0)
             {
                 MessageToken[] tokens = { new MessageToken("COLUMNVAL", "PTI("+pal+") and PKG Group Code("+pkg+") combination")};
                  throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                         tokens,//tokens,
                                                         OAException.ERROR,
                                                         null);
             }
        }else{
        
            if(pkg!=null&&pkg.trim().length()>0)
                    {
                        query="SELECT   COUNT ( * ) REC_COUNT " + 
                            "  FROM   XXON_OM_SCH_CONTROLS " +
                            "WHERE ENABLED_FLAG='Y' " +
                            "AND PTI IS NULL "+
                            "AND UPPER(PACKAGE_CD)=UPPER(:1)";   
                            duplicateCheckVO.setQuery(query);    
                        
                        duplicateCheckVO.setWhereClauseParam(0,pkg);
                        duplicateCheckVO.executeQuery();
                        XXONGbwScheDuplicateCheckVORowImpl row=(XXONGbwScheDuplicateCheckVORowImpl)duplicateCheckVO.first();
                         Number recCount=row.getRecCount();
                         log("recCount-->"+recCount);
                         if(recCount!=null&&recCount.intValue()>0)
                         {
                             MessageToken[] tokens = { new MessageToken("COLUMNVAL", pkg)};
                              throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                                     tokens,//tokens,
                                                                     OAException.ERROR,
                                                                     null);
                         }
                    }else if(pal!=null&&pal.trim().length()>0)
                    {
                        query="SELECT   COUNT ( * ) REC_COUNT " + 
                                "  FROM   XXON_OM_SCH_CONTROLS " +
                                "WHERE ENABLED_FLAG='Y' " +
                                "AND PACKAGE_CD IS NULL "+
                                "AND UPPER(PTI)=UPPER(:1)";   
                            duplicateCheckVO.setQuery(query);  
                     
                        duplicateCheckVO.setWhereClauseParam(0,pal);
                        duplicateCheckVO.executeQuery();
                        XXONGbwScheDuplicateCheckVORowImpl row=(XXONGbwScheDuplicateCheckVORowImpl)duplicateCheckVO.first();
                         Number recCount=row.getRecCount();
                         log("recCount-->"+recCount);
                         if(recCount!=null&&recCount.intValue()>0)
                         {
                             MessageToken[] tokens = { new MessageToken("COLUMNVAL", pal)};
                              throw new OAException("XXON","XXON_OM_GBW_SCHCTL_DUPLI_ERR",
                                                                     tokens,//tokens,
                                                                     OAException.ERROR,
                                                                     null);
                         }
                    }
        }
  }

 public int makeReadOnly()
    {
    int rowCount=0;
     log("inside makeReadOnly ");
     XXONGbwScheCtlResultVOImpl ctlResultVO=getXXONGbwScheCtlResultVO1();
       Row row=null;
        row=ctlResultVO.first();
        while(row!=null)
        {
           rowCount++;
           String newRow=(String)row.getAttribute("NewRow");
           if(newRow!=null&&newRow.equals("Y"))
            {
                row.setAttribute("ReadOnlyPti",false);
                row.setAttribute("ReadOnlyMpn",false);
                row.setAttribute("ReadOnlyPkg",false);
                row.setAttribute("ReadOnlyOu",false);
            }else{
                row.setAttribute("ReadOnlyPti",true);
                row.setAttribute("ReadOnlyMpn",true);
                row.setAttribute("ReadOnlyPkg",true);
                row.setAttribute("ReadOnlyOu",true);
            }
           row=ctlResultVO.next();
       }
       return rowCount;
    }
    public void updateSchMethosssd()
       {
       try{
           XXONGbwScheCtlResultVOImpl scheCtlResultVO=getXXONGbwScheCtlResultVO1();
           if(scheCtlResultVO.getFetchedRowCount()<=0)
               {
                   String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
                   throw new OAException(s1,OAException.ERROR);
               }
           XXONGbwScheCtlResultVORowImpl selectedRows=null;
           Row[] rows = scheCtlResultVO.getFilteredRows("select", "Y");
           if(rows.length<=0)
           {
               throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",
                                                null,//tokens,
                                                OAException.ERROR,
                                                null);
           }
                   int userId=getOADBTransaction().getUserId();
           int lastUpdateLogin=getOADBTransaction().getLoginId(); 
                   Boolean isUpdate=false;
                           String updateQuery = "UPDATE XXON_OM_SCH_CONTROLS SET SCHEDULING_METHOD=:1 ,\n" + 
                                 "LAST_UPDATE_DATE=SYSDATE,LAST_UPDATED_BY=:2, LAST_UPDATE_LOGIN=:3 WHERE SCH_CONTROL_ID=:4";
                   Connection conn = getOADBTransaction().getJdbcConnection();
           PreparedStatement pStatement = conn.prepareStatement(updateQuery);
                    conn.setAutoCommit(false);
                    
             for (int i = 0; i < rows.length; i++)
           {
               selectedRows = (XXONGbwScheCtlResultVORowImpl)rows[i];
                               String SchedulingMethod=null;
                   Number SchControlId=null;            
                   SchedulingMethod=selectedRows.getSchedulingMethod();  
                   SchControlId=selectedRows.getSchControlId();
                   // add to statement
                   pStatement.setString(1,SchedulingMethod);
                   pStatement.setInt(2,userId);
                   pStatement.setInt(3,lastUpdateLogin);
                   pStatement.setInt(4,Integer.parseInt(SchControlId.toString()));
                   pStatement.addBatch();
                   isUpdate=true;
                   }
                     if (isUpdate)
              {
                  pStatement.executeBatch();
                  conn.commit();
                  pStatement.close();
                              conn.close();
                  
             }
           }catch(OAException exception)
                  {
                       throw exception;
                   }catch(Exception exception)
                   {
                       throw new OAException("Error while save data -->"+exception.getMessage(),OAException.ERROR);
                   }
    }
    public void saveToDb()
    {
      getOADBTransaction().commit();
    }
    /**
     * Below Method is to print the log messages
     *@param Message for text 
    */
    private void log(String Message)
    {
        XXONGbwUtil utils= new XXONGbwUtil();
        OADBTransaction oadb=getOADBTransaction();
        utils.log(Message,oadb);   
    }

    /**Container's getter for XXONGbwSearchValuesVO1
     */
    public XXONGbwSearchValuesVOImpl getXXONGbwSearchValuesVO1() {
        return (XXONGbwSearchValuesVOImpl)findViewObject("XXONGbwSearchValuesVO1");
    }

    /**Container's getter for XXONGbwRecordsDisplayVO1
     */
    public XXONGbwRecordsDisplayVOImpl getXXONGbwRecordsDisplayVO1() {
        return (XXONGbwRecordsDisplayVOImpl)findViewObject("XXONGbwRecordsDisplayVO1");
    }


    /**Container's getter for XXONGbwScheCtlResultVO1
     */
    public XXONGbwScheCtlResultVOImpl getXXONGbwScheCtlResultVO1() {
        return (XXONGbwScheCtlResultVOImpl)findViewObject("XXONGbwScheCtlResultVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.xxon.om.gbw.schctl.server", /* package name */
      "XXONGbwScheCtlAMLocal" /* Configuration Name */);
    }


    /**Container's getter for XXONGbwPackageLovVO1
     */
    public XXONGbwPackageLovVOImpl getXXONGbwPackageLovVO1() {
        return (XXONGbwPackageLovVOImpl)findViewObject("XXONGbwPackageLovVO1");
    }

    /**Container's getter for XXONGbwPtiLovVO1
     */
    public XXONGbwPtiLovVOImpl getXXONGbwPtiLovVO1() {
        return (XXONGbwPtiLovVOImpl)findViewObject("XXONGbwPtiLovVO1");
    }

    /**Container's getter for XXONGbwScheDuplicateCheckVO1
     */
    public XXONGbwScheDuplicateCheckVOImpl getXXONGbwScheDuplicateCheckVO1() {
        return (XXONGbwScheDuplicateCheckVOImpl)findViewObject("XXONGbwScheDuplicateCheckVO1");
    }
}
