package oracle.apps.xxon.om.gbw.chgord.server;

import com.sun.java.util.collections.HashMap;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;

import java.util.ArrayList;

import java.util.Hashtable;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAApplicationModule;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.fnd.framework.webui.OADialogPage;
import oracle.apps.fnd.framework.webui.OAPageContext;
import oracle.apps.fnd.framework.webui.OAWebBeanConstants;
import oracle.apps.fnd.framework.webui.beans.OAWebBean;
import oracle.apps.xxon.om.gbw.chgord.beans.XXONGbwChangeOrdObj;
import oracle.apps.xxon.om.gbw.chgord.beans.XXONGbwChangeOrdTab;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCancelReasonCodeVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCorpCodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCust5CodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwOpnLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPackageLovVOImpl;
import oracle.apps.xxon.om.gbw.util.XXONGbwUtil;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleConnection;
import oracle.jdbc.OracleTypes;

import oracle.sql.ARRAY;
import oracle.sql.NUMBER;


//import com.sun.xml.internal.ws.wsdl.writer.document.Types;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XXONGbwChangeOrderAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
     Row[] selectedAllRows=null;
    public XXONGbwChangeOrderAMImpl() {
    }
    public void executeVO() {
        XXONGbwDummyVOImpl dummyvo = getXXONGbwDummyVO1();
        if (dummyvo != null)
            dummyvo.executeQuery();
    }
    public void recDisInit() {
        XXONGbwRecordsDisplayVOImpl RecordsDisplayVO = 
            getXXONGbwRecordsDisplayVO1();
        if (!RecordsDisplayVO.isExecuted())
            RecordsDisplayVO.executeQuery();
    }
    //Get OrderType Flex Valued Method
    public String getOrderTypeValue(String ordtype) {
        XXONGbwOrderTypeVOImpl vo = getXXONGbwOrderTypeVO1();
        String fvalue = null;
        String whereclass = "Order_Type like '" + ordtype + "'";
        vo.addWhereClause(whereclass);
        vo.executeQuery();
        vo.setWhereClause(null);
        fvalue = (String)vo.first().getAttribute("FlexValue");
        return fvalue;
    }

    //SEARCH Trading Partner Details Method Validation...
    public void searchOrders(String p_opn, String p_corpcode, 
                             String p_cust5code, String p_pal, String p_ordNum, 
                             String p_operatingUnit, String p_package, 
                             String respAccess,String p_plannerId,String legacyOrdNum,String lineNum,String p_poNum) 
    {
    
     try{
                log("p_opn,p_corpcode,p_cust5code,p_pal,p_ordNum,p_operatingUnit,p_package------>" +p_opn);
                String v_orderhold = null;
                String p_can_reason_code=null;
                XXONGbwSrchResultVOImpl vo = getXXONGbwSrchResultVO1();        
                if(respAccess != null && (respAccess.equalsIgnoreCase("S") ||respAccess.equalsIgnoreCase("P"))) 
                {
                    vo.setWhereClauseParams(null);
                    vo.setWhereClause("1=1 AND STATUS = 'APPROVAL_PENDING'");           
                } 
                else
                {
                    vo.setWhereClauseParams(null);
                    vo.setWhereClause("1=1");
                }
                int javaBindNum = 0;
                if (p_opn != null && p_opn.trim().length() > 0) 
                {
                    if(p_opn.contains("%"))
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND OPN LIKE :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_opn.toUpperCase());
                    }
                    else
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND OPN = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_opn.toUpperCase());
                    }
                }
                if (p_corpcode != null && p_corpcode.trim().length() > 0) 
                {
                    if(p_corpcode.contains("%"))
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND CUST_CODE LIKE :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_corpcode.toUpperCase());
                    }
                    else
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND CUST_CODE = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_corpcode.toUpperCase());
                    }             
                }
                if (p_cust5code != null && p_cust5code.trim().length() > 0) 
                {
                    if(p_cust5code.contains("%"))
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND CUST5_CODE LIKE :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_cust5code.toUpperCase());
                    }
                    else
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND CUST5_CODE = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_cust5code.toUpperCase());
                    }
                }
               
                //Added below change on 21/mar by raghu for PAL code based on number of characters user enter in the form
                if (p_pal != null && p_pal.trim().length() > 0)
                {
                    if(p_pal.contains("%"))
                    {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR1",null,OAException.ERROR,null);    
                    }
                    if(p_pal.trim().length()>=4)
                    {
                        javaBindNum++;
                        vo.addWhereClause(" AND PAL =TRIM(:"+javaBindNum+")");
                        vo.setWhereClauseParam(javaBindNum-1,p_pal.toUpperCase());     
                    }
                    else if (p_pal.trim().length()==3) {
                        javaBindNum++;  //substr(attribute14,0,3)
                        vo.addWhereClause(" AND SUBSTR(PAL,0,3) = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_pal.toUpperCase());
                    }
                    else if (p_pal.trim().length()==2) {
                        javaBindNum++;  //substr(attribute14,0,2)
                        vo.addWhereClause(" AND SUBSTR(PAL,0,2) = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_pal.toUpperCase());
                    }
                }
                
                if (p_package != null && p_package.trim().length() > 0) 
                {
                    if(p_package.contains("%"))
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND PACKAGE1 LIKE :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_package.toUpperCase());
                    }
                    else
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND PACKAGE1 = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_package.toUpperCase());
                    }            
                }
                //do not allow wild card search for OrderNumber -Added this on 21/mar by raghu.
                 if (p_ordNum != null && p_ordNum.trim().length() > 0) 
                 {
                     if(p_ordNum.contains("%"))
                     {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR2",null,OAException.ERROR,null);
                     }                 
                     javaBindNum++;
                     vo.addWhereClause(" AND ORDER_NUMBER = TRIM(:"+javaBindNum+")");                         
                     vo.setWhereClauseParam(javaBindNum-1,p_ordNum.toUpperCase());
                 }
                 
                if (p_operatingUnit != null && p_operatingUnit.trim().length() > 0) 
                {
                    if(p_operatingUnit.contains("%"))
                    {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR14",null,OAException.ERROR,null); 
                    }
                    if(p_opn!=null && p_opn.trim().length() > 0)  
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND ORG_ID = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_operatingUnit.toUpperCase());
                    }
                    else 
                    {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR14",null,OAException.ERROR,null); 
                    }
//                    if(p_operatingUnit.contains("%"))
//                    {
//                        javaBindNum++;  
//                        vo.addWhereClause(" AND ORG_ID LIKE :"+javaBindNum);
//                        vo.setWhereClauseParam(javaBindNum-1,p_operatingUnit.toUpperCase());
//                    }
//                    else
//                    {
//                        javaBindNum++;  
//                        vo.addWhereClause(" AND ORG_ID = :"+javaBindNum);
//                        vo.setWhereClauseParam(javaBindNum-1,p_operatingUnit.toUpperCase());
//                    } 
                }
                if (p_plannerId != null && p_plannerId.trim().length() > 0) 
                {
                    if(p_plannerId.contains("%"))
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND PLANNER_ID LIKE :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_plannerId.toUpperCase());
                    }
                    else
                    {
                        javaBindNum++;  
                        vo.addWhereClause(" AND PLANNER_ID = TRIM(:"+javaBindNum+")");
                        //vo.addWhereClause(" AND PLANNER_ID = :"+javaBindNum);
                        vo.setWhereClauseParam(javaBindNum-1,p_plannerId.toUpperCase());
                    }
                }
                //Added for Legacy order and line number as search fields by Raghu on 21-feb-2018.
                 if (legacyOrdNum != null && legacyOrdNum.trim().length() > 0) 
                 {
                     if(legacyOrdNum.contains("%"))
                     {
                         throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR3",null,OAException.ERROR,null);
                     }
                     javaBindNum++;  
                     vo.addWhereClause(" AND LEGACY_ORDER = TRIM(:"+javaBindNum+")");                         
                     vo.setWhereClauseParam(javaBindNum-1,legacyOrdNum.toUpperCase());                    
                 }
                 
                if (lineNum != null && lineNum.trim().length() > 0 ) 
                {
                    if(lineNum.contains("%"))
                    {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR4",null,OAException.ERROR,null);
                    }
                    if(legacyOrdNum != null && legacyOrdNum.trim().length() > 0)
                    {
                         javaBindNum++;  
                         vo.addWhereClause(" AND LEGACY_LINE_NUMBER = TRIM(:"+javaBindNum+")");                         
                         vo.setWhereClauseParam(javaBindNum-1,lineNum.toUpperCase());
                     }
                     else 
                     {
                        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR5",null,OAException.ERROR,null);
                      }
                }
                
                //Cust po number
                 if (p_poNum != null && p_poNum.trim().length() > 0 ) 
                 {
                     if(p_poNum.contains("%"))
                     {
                         throw new OAException("XXON","XXON_OM_GBW_PONUM_SEARCH_ERR",null,OAException.ERROR,null);
                     }
                     javaBindNum++;  
                     vo.addWhereClause(" AND PO_NUMBER = TRIM(:"+javaBindNum+")");                         
                     vo.setWhereClauseParam(javaBindNum-1,p_poNum.toUpperCase());
                     
                 }
                 
        if(javaBindNum == 1 && p_corpcode != null && p_corpcode.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_BLV_SEARCH_ERR11", null, (byte)0, null);
        if(javaBindNum == 1 && p_package != null && p_package.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_BLV_SEARCH_ERR16", null, (byte)0, null);
        if(javaBindNum == 1 && p_pal != null && p_pal.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_BLV_SEARCH_ERR15", null, (byte)0, null);
       /* if(javaBindNum == 1 && p_opn != null && p_opn.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_PONUM_SEARCH_ERR1", null, (byte)0, null); */
        if(javaBindNum == 1 && p_cust5code != null && p_cust5code.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_PONUM_SEARCH_ERR2", null, (byte)0, null);
        //if(javaBindNum == 1 && p_operatingUnit != null && p_operatingUnit.trim().length() > 0 )
          //     throw new OAException("XXON", "XXON_OM_GBW_BLV_SEARCH_ERR14", null, (byte)0, null);
        if(javaBindNum == 2 && p_operatingUnit != null && p_operatingUnit.trim().length() > 0 && p_opn != null && p_opn.trim().length() > 0)
            throw new OAException("XXON", "XXON_OM_GBW_BLV_SEARCH_ERR14", null, (byte)0, null);
                
                if (javaBindNum > 0) 
                {
                    //String p_status = null; 
                    vo.addOrderByClause(" SSD ASC NULLS FIRST ");
                    vo.executeQuery(); 
                    vo.clearCache();
                    log("SearchResult Query---->" + vo.getQuery());
                    log("SearchResult Rowcount --->" + vo.getRowCount());                      
                    oracle.jbo.domain.Date plrsd=null;
                    Row srchvorow = vo.first(); 
                    while(srchvorow!=null)
                    {
                        log("In User(M) or Super User(S) Access" + respAccess);  //NewSsd, PlRsd
                        srchvorow.setAttribute("isReadOnly",Boolean.FALSE);
                        srchvorow.setAttribute("ssdReadOnly",Boolean.FALSE);   
                        srchvorow.setAttribute("reasCodeReadOnly",Boolean.FALSE);
                        srchvorow.setAttribute("NewSsd",srchvorow.getAttribute("PlNewrsd"));  //Added this line for defaulting SSD=RSD.
                        if(srchvorow.getAttribute("CancelReason")!=null) {
                            p_can_reason_code= getCancelReasonCode((String)srchvorow.getAttribute("CancelReason"));
                            if(p_can_reason_code!=null) srchvorow.setAttribute("CancelReason",p_can_reason_code); 
                        }
                        if (("APPROVAL_PENDING".equalsIgnoreCase((String)srchvorow.getAttribute("Status"))) ||"Y".equalsIgnoreCase((String)srchvorow.getAttribute("OrderHold"))) 
                        {
                            log("In Super User Access-->" + respAccess);
                            srchvorow.setAttribute("isReadOnly",Boolean.TRUE);
                            srchvorow.setAttribute("reasCodeReadOnly",Boolean.TRUE);  
                        }                 
                        if("QTYDECR".equalsIgnoreCase((String)srchvorow.getAttribute("ChangeType"))) 
                        {
                            srchvorow.setAttribute("ssdReadOnly",Boolean.TRUE); 
                        }
                        srchvorow = vo.next();                  
                    } 
                    vo.setRangeStart(0);
                    XXONGbwRecordsDisplayVOImpl RecordsDisplayVO = getXXONGbwRecordsDisplayVO1();
                    XXONGbwRecordsDisplayVORowImpl row = (XXONGbwRecordsDisplayVORowImpl)RecordsDisplayVO.first();
                    row.setAttribute("recCount", (new StringBuilder()).append(vo.getEstimatedRowCount()).append(" Record(s) found.").toString());
                } 
                else
                {
                    throw new OAException("XXON", "XXON_OM_GBW_SEARCH_ERR", null,OAException.ERROR, null);
                }
       } catch(OAException ex)
       {
           throw ex;
       }catch(Exception exp)
       {
           throw new OAException(exp.getMessage(),OAException.ERROR);
       }
    }
    
    public String getCancelReasonCode(String v_can_reason_code) 
    {
        String p_cancel_reason=null;
        log("getCancelReasonCode...");        
        PreparedStatement preparedstatement = null;
        ResultSet resultset = null;
        OracleConnection conn = (OracleConnection)getOADBTransaction().getJdbcConnection();
        try
               {
                   String s1 = "SELECT   meaning FROM   XXON_OM_GBW_CANCE_REASON_LOV_V where reason_code=:1";
                   preparedstatement = conn.prepareStatement(s1);
                   preparedstatement.setString(1, v_can_reason_code);
                   resultset = preparedstatement.executeQuery();
                   if(resultset.next())
                   {
                       p_cancel_reason = resultset.getString(1);
                       log("p_cancel_reason -->"+p_cancel_reason);
                       resultset.close();
                       preparedstatement.close(); 
                   }
               }
               catch(Exception e)
               {
                   throw OAException.wrapperException(e);
               }               
        return p_cancel_reason;
    }
   
    //EXECUTEUPDATE Method VALIDATION.....
    public String executeUpdate(ArrayList queryList, OAPageContext pageContext, 
                                OAWebBean webBean) {
        OAApplicationModule am = (OAApplicationModule)pageContext.getApplicationModule(webBean);
        Connection connection = null;
        Statement statement = null;
        String errorString = "";
        pageContext.writeDiagnostics(this, "XXON'S IN BATCH UPDATE METHOD ::", 
                                     1);
        if (queryList != null && queryList.size() > 0) {
            try {
                connection = am.getOADBTransaction().getJdbcConnection();
                connection.setAutoCommit(Boolean.FALSE);
                statement = connection.createStatement();
                //adding queries to batch
                for (int index = 0; index < queryList.size(); index++) {
                    //log("Query --- > "+(String)queryList.get(index));                   
                    statement.addBatch((String)queryList.get(index));
                }
                statement.executeBatch();
                statement.close();
                connection.commit();
                getOADBTransaction().commit();
                errorString = "Y";
            } catch (Exception exception) {
                try {
                    connection.rollback();
                } catch (Exception exce) {
                    return "Error : " + exception.getMessage();
                }
                errorString = 
                        "Error while saving the selected Record(s). Error : " + 
                        exception.getMessage();
            }
        }
        return "Y";
    }
    
//Modified code on 14-dec-2017...
 /**
  * get Decimal value
  */
 public static BigDecimal getBigDecimal(Number value) {
     BigDecimal decimalValue = null;
     if(value != null){
         decimalValue = new BigDecimal(value.toString());
     }
     return decimalValue; 
 } 
 
    /**
     * getSqlTimeStamp
     */
     public static Timestamp getSqlTimeStamp(oracle.jbo.domain.Date oafDate){
        Timestamp timeStampValue = null;
        if(oafDate != null){
            try{
              //timeStampValue = new Timestamp((oafDate.dateValue()).getTime());
               timeStampValue = oafDate.timestampValue();
             System.out.println("Time stamp Value ---->"+timeStampValue.toString());
            }catch(Exception exc){
                System.out.println("Error while parsing dates."+exc.getMessage());
            }
        }
        return timeStampValue;
     }
     
public String DataValidation(String P_Status,HashMap hmap,OAPageContext pageContext) 
{
    log("start of validateRecords method");
    selectedAllRows=null;
    XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();
    com.sun.java.util.collections.ArrayList mpqFailList = new com.sun.java.util.collections.ArrayList();
    if(resultVO.getFetchedRowCount()<=0)
    {
        String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
        throw new OAException(s1,OAException.ERROR);
    }
    XXONGbwSrchResultVORowImpl selectedRows=null;
    Row[] rows = resultVO.getFilteredRows("isSelect", "Y");   
    selectedAllRows=resultVO.getFilteredRows("isSelect", "Y");
    if(rows.length<=0)
    {
       throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",null,OAException.ERROR,null);          
    }
    oracle.jbo.domain.Date p_newreqDate;
    oracle.jbo.domain.Number v_Quantity=null;
    String p_PriceList=null;
    String p_PriceListStatus=null;
    String p_ItemStatus=null;
    oracle.jbo.domain.Number p_Mpq=null;
    String p_CustPoNumber=null;
    String p_CustPoLineNumber=null;
    String p_dbStatus=null;
    String p_cancelReason=null;
    Number orderNumber=null;
    String lineNumber =null;
    oracle.jbo.domain.Number v_Qty = null;
    String p_mpq_valid="N";
    int p_val;
    com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
    OADBTransaction transaction = getOADBTransaction();
    oracle.jbo.domain.Date sysDate = transaction.getCurrentDBDate();
    
    String r_output=null;
    String p_ds_rule_name="ENFORCE_MPQ";
    String p_ou=null;
    String p_business_class=null;
    String p_corp_code=null;
    String p_site_code=null;
    String p_pal2_code=null;
    String p_item_number=null;
    String p_order_type=null;
    oracle.jbo.domain.Number p_oe_lineId=null;
    String confirmMsg = null;
    String h_mpq = null;
    StringBuffer sb = new StringBuffer();
    boolean qtyViolation = Boolean.FALSE;
    //selectedRows.getisSelect();
    String p_orderHold=null;    

    for (int i = 0; i < rows.length; i++)
    {
                     selectedRows = (XXONGbwSrchResultVORowImpl)rows[i]; 
                     p_newreqDate=selectedRows.getNewRsd();
                     v_Quantity=selectedRows.getNewQuantity();
                     lineNumber=selectedRows.getLineNumber();
                     p_PriceList=selectedRows.getPriceList();
                     p_PriceListStatus=selectedRows.getPriceListStatus();
                     p_ItemStatus=selectedRows.getItemStatus();
                     p_Mpq=selectedRows.getMpq();
                     p_CustPoNumber=selectedRows.getCustPoNumber();
                     p_CustPoLineNumber=selectedRows.getCustPoLineNumber();
                     p_dbStatus=selectedRows.getStatus();
                     p_cancelReason=selectedRows.getCancelReason();
                     orderNumber=selectedRows.getOrderNumber(); 
                     v_Qty = selectedRows.getQuantity();   
                     log("OrderNumber-->"+orderNumber);
                     log("lineNumber-->"+lineNumber);
                     
                     p_ou=selectedRows.getOperUnit();
                     p_business_class=selectedRows.getBizClass();
                     p_corp_code=selectedRows.getCustCode();
                     p_site_code=selectedRows.getCust5Code();
                     p_pal2_code=selectedRows.getPal();
                     p_item_number=selectedRows.getItemNumber();
                     p_order_type=selectedRows.getOrderType();
                     p_oe_lineId=selectedRows.getLineId();
                     p_orderHold=selectedRows.getOrderHold();
                     log("p_orderHold Value ---->"+p_orderHold);                     
                     
                     if(p_Mpq!=null)
                     {
                      log("Mpq Value ====>"+p_Mpq.intValue());
                     }
                     MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber.toString()),new MessageToken("LINENUMBER",   lineNumber)};
                     if(p_orderHold!=null && p_orderHold.equals("Y"))exceptions.add(new OAException("XXON","XXON_OM_GBW_ORDHOLD_ERR",tokens,OAException.ERROR,null));
                     
                     if((p_newreqDate==null||p_newreqDate.equals("")) && (v_Quantity==null || v_Quantity.equals(""))) 
                     {
                        exceptions.add(new OAException("XXON","XXON_OM_GBW_NO_CHANGE_ERR",tokens,OAException.ERROR,null));
                     }                     
                     if (p_newreqDate != null && p_newreqDate.dateValue().getTime() < sysDate.dateValue().getTime()) 
                     {                        
                        exceptions.add(new OAException("XXON","XXON_OM_GBW_NEW_RD_ERR",tokens,OAException.ERROR,null)); 
                     } 
                     if(p_PriceList==null ||p_PriceList.trim().length() == 0)     exceptions.add(new OAException("XXON","XXON_OM_GBW_PRICELIST_ERR",tokens,OAException.ERROR,null));
                     if(p_PriceListStatus!=null && p_PriceListStatus.equals("N")) exceptions.add(new OAException("XXON","XXON_OM_GBW_PLIST_STAT_ERR",tokens,OAException.ERROR,null)); 
                     if(p_ItemStatus!=null && p_ItemStatus.equals("Inactive"))    exceptions.add(new OAException("XXON","XXON_OM_GBW_ITEMSTATUS_ERR",tokens,OAException.ERROR,null));
                     if(p_CustPoNumber==null || p_CustPoNumber.equals("")) exceptions.add(new OAException("XXON","XXON_OM_GBW_CUST_PO_NUM_ERR",tokens,OAException.ERROR,null));                           
                     if(p_CustPoLineNumber==null || p_CustPoLineNumber.equals("")) exceptions.add(new OAException("XXON","XXON_OM_GBW_CUST_PO_LINE_ERR",tokens,OAException.ERROR,null));                           
                     if(p_dbStatus!=null && p_dbStatus.equals("APPROVAL_PENDING")) exceptions.add(new OAException("XXON","XXON_OM_GBW_PENDING_STAT_ERR",tokens,OAException.ERROR,null));                    
                     //Added code for cancel reason validation if new Quantity is zero 
                     if(v_Quantity!=null && v_Quantity.longValue()==0)
                     {
                        log("new Quantity is Zero -->" + v_Quantity);
                        if(p_cancelReason==null||p_cancelReason.equals(""))
                        {
                            exceptions.add(new OAException("XXON","XXON_OM_GBW_CAN_REASON_ERR",tokens,OAException.ERROR,null));
                        }
                     }
                     if (!P_Status.equals("REJECTED"))
                     {
                        //Quantity should be less than existing Qry validation...
                        if (v_Qty != null && v_Quantity != null && v_Quantity.getValue() >= v_Qty.getValue()) 
                        {                        
                           exceptions.add(new OAException("XXON","XXON_OM_GBW_NEW_QTY_ERR",tokens,OAException.ERROR,null));
                        }
                     }
                    if(p_Mpq!=null && v_Quantity!=null)
                    { 
                        p_val=v_Quantity.intValue() % p_Mpq.intValue(); 
                        log("MPQ Validation value--->"+p_val); 
                        if(p_val!=0)
                        {
                           qtyViolation = Boolean.TRUE;
                           String s1=pageContext.getMessage("XXON","XXON_OM_GBW_MPQ_VALID_INFO",null);
                           if(sb.length() > 0) sb.append(" ; ");
                           sb.append(s1+" at order#"+orderNumber.toString()+" line#"+lineNumber);
                        }
                    } 
                    
    } // end for loop
    if(exceptions.size() > 0)
    {
        OAException.raiseBundledOAException(exceptions);
    }
    else
    {
        //selectedAllRows=null;
        log("MPQ Validation else block"); 
        if(!qtyViolation)
        {
            log("qtyViolation @ else block --->"+qtyViolation); 
            if(p_mpq_valid.equals("N"))
            {  
                passingCsrDataToObject(P_Status);   
            } 
        }
    }
       return sb.toString();
}

//newSSD Data Validation
public String custShutDownPeriod(String p_status,OAPageContext pageContext) 
{
    log("start of custShutDownPeriod method");
    selectedAllRows=null;
    XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();    
    if(resultVO.getFetchedRowCount()<=0)
    {
        String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
        throw new OAException(s1,OAException.ERROR);
    }
    XXONGbwSrchResultVORowImpl selectedRows=null;
    Row[] rows = resultVO.getFilteredRows("isSelect", "Y");   
    selectedAllRows=resultVO.getFilteredRows("isSelect", "Y");
    if(rows.length<=0)
    {
       throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",null,OAException.ERROR,null);          
    }
    oracle.jbo.domain.Date p_newSsd;
    com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
    StringBuffer sb = new StringBuffer();
    boolean newSSDViolation = Boolean.FALSE;
    Number orderNumber=null;
    String lineNumber =null;
    String p_cust5code = null;
    oracle.jbo.domain.Date p_custdownperiod = null;
    for (int i = 0; i < rows.length; i++)
    {
        selectedRows = (XXONGbwSrchResultVORowImpl)rows[i];
        orderNumber=selectedRows.getOrderNumber(); 
        lineNumber=selectedRows.getLineNumber();
        p_newSsd=selectedRows.getNewSsd();
        p_cust5code=selectedRows.getCust5Code();
        
        //Scheduled Ship Date falls inside customer shutdown period
         if(p_newSsd!=null && p_status.equalsIgnoreCase("APPROVED")) 
         {
             log("p_newSsd value-->"+p_newSsd);
             log("p_cust5code value-->"+p_cust5code);
             //checking customer shutdown periods.             
             p_custdownperiod = getCustDownPeriods(p_newSsd,p_cust5code);
             log("p_custdownperiod value-->"+p_custdownperiod);
             if(p_custdownperiod!=null && !p_newSsd.equals(p_custdownperiod))
             {
                log("after date comparisons");
                newSSDViolation = Boolean.TRUE;                
                String s1=" at (order#"+orderNumber.toString()+" line#"+lineNumber+")";
                String s2=" ,(order#"+orderNumber.toString()+" line#"+lineNumber+")";
                if(sb.length() > 0)
                {
                    sb.append(s2);
                }else{
                    sb.append(s1);
                }
             }
         }           
    }
    if(exceptions.size() > 0)
    {
        OAException.raiseBundledOAException(exceptions);
    }
    else
    {
        log("New SSD Validation else block"); 
        if(!newSSDViolation)
        {
            log("newSSDViolation @ else block --->"+newSSDViolation);
            passingPlannerDataToObject(p_status);
        }
     }
      String fndMessage=pageContext.getMessage("XXON","XXON_OM_GBW_CUST_SHUTDOWN_ERR",null);
      String returnMessage=null;
      if(sb.length()>0)
      {
          returnMessage=fndMessage+sb.toString();
      }
     return returnMessage;
}
//getCustDownPeriods
public oracle.jbo.domain.Date getCustDownPeriods(oracle.jbo.domain.Date p_newSSd,String p_cust5code)
{
    log("@ getCustDownPeriods Method");
    oracle.jbo.domain.Date p_custdownperiod = null;
    PreparedStatement preparedstatement = null;
    ResultSet resultset = null;
    OracleConnection conn = (OracleConnection)getOADBTransaction().getJdbcConnection();
    try
           {
               String s1 = "SELECT APPS.XXON_OM_GBW_COMMONS_PKG.GET_REVISED_SSD(:1,:2) FROM DUAL";
               preparedstatement = conn.prepareStatement(s1);
               preparedstatement.setDate(1, p_newSSd.dateValue());
               preparedstatement.setString(2,p_cust5code);
               resultset = preparedstatement.executeQuery();          
               if(resultset.next())
               {
                   p_custdownperiod = new oracle.jbo.domain.Date(resultset.getDate(1));
                   log("p_custdownperiod @ getCustDownPeriods Method -->"+p_custdownperiod);
                   resultset.close();
                   preparedstatement.close(); 
               }
           }
           catch(Exception e)
           {
               throw OAException.wrapperException(e);
           }
           return p_custdownperiod;  
}

//Mpq validation warning message confirmation
public String mpqWarningMessageShow(OAPageContext pageContext) 
{
    XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();
    XXONGbwSrchResultVORowImpl selectedRows=null;
    oracle.jbo.domain.Number v_Quantity=null;
    oracle.jbo.domain.Number p_Mpq=null;
    Number orderNumber=null;
    String lineNumber =null;
    StringBuffer sb = new StringBuffer();
    com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
    Row[] rows = resultVO.getFilteredRows("isSelect", "Y");
    for (int i = 0; i < rows.length; i++)
    {
        selectedRows = (XXONGbwSrchResultVORowImpl)rows[i]; 
        v_Quantity=selectedRows.getNewQuantity();
        p_Mpq=selectedRows.getMpq();
        orderNumber=selectedRows.getOrderNumber(); 
        lineNumber=selectedRows.getLineNumber();
        MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber.toString()),new MessageToken("LINENUMBER",lineNumber)};
        
         String s1=pageContext.getMessage("XXON","XXON_OM_GBW_MPQ_VALID_INFO",null);
        if(sb.length() > 0) sb.append(" ; ");
        sb.append(s1+" at order#"+orderNumber+" line#"+lineNumber);         
    }
    return sb.toString();
}
public void passingCsrDataToObject(String P_Status) 
{
              log("Start of passingDataToObject");
              XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();
              XXONGbwSrchResultVORowImpl selectedRows=null;
              log("ResultVO count-->"+resultVO.getFetchedRowCount());
              XXONGbwUtil utils= new XXONGbwUtil();
              String accessLevel=null;
              accessLevel=utils.respAccessLevel(getOADBTransaction());
              XXONGbwChangeOrdObj            gbwChangeOrdObj             = null;
              XXONGbwChangeOrdObj[]          gbwChangeOrdArray           = null;
              XXONGbwChangeOrdTab            gbwChangeOrdTab             = null;
              ArrayList<XXONGbwChangeOrdObj> gbwChangeOrdObjArrayList    = null;
              oracle.jbo.domain.Date p_Rsd = null;
              oracle.jbo.domain.Date p_Ssd = null;
              oracle.jbo.domain.Date p_SAD = null;
              oracle.jbo.domain.Date p_newreqDate = null;
              oracle.jbo.domain.Number v_HeaderId = null;
              oracle.jbo.domain.Number v_LineId = null;
              oracle.jbo.domain.Number v_OrgId = null;
              oracle.jbo.domain.Number v_Quantity = null;
              oracle.jbo.domain.Number v_Qty = null;
              oracle.jbo.domain.Number v_stgLineId = null;
              oracle.jbo.domain.Number v_StgHeaderId = null;
              oracle.jbo.domain.Date db_newreqDate = null;
              oracle.jbo.domain.Number db_Quantity = null;
              String p_changeType = null;        
              String p_DsRuleName=null; 
              String p_OperUnit=null;
              String p_BizClass=null;
              String p_CorpCode=null;
              String p_Cust5_Code=null;
              String p_Pal=null;
              String p_item_number=null;
              String p_OrderType=null;
              String p_dbStatus=null;
              String p_ItemStatus=null;
              oracle.jbo.domain.Number p_Mpq=null;                
              String p_CustPoNumber=null;
              String p_CustPoLineNumber=null;
              String p_PriceList=null;
              String p_PriceListStatus=null;
              String p_cancelReason=null;
              Number  orderNumber=null;
              String  lineNumber=null;
              Number p_resched_counter=null;
              String p_orderHold=null;
               
              try{                   
                       Row[] row = resultVO.getFilteredRows("isSelect", "Y");
                       log("selected row count ----- "+row.length);                       
                       if(row.length==0){
                       if(selectedAllRows!=null)
                       {
                         row=selectedAllRows;
                             log("selectedAllRows row count ----- "+selectedAllRows.length);
                       }
                         }                       
                       for (int i = 0; i < row.length; i++)
                       {
                            selectedRows = (XXONGbwSrchResultVORowImpl)row[i];                     
                            v_HeaderId =selectedRows.getHeaderId();                       
                            orderNumber=selectedRows.getOrderNumber();                   
                            lineNumber= selectedRows.getLineNumber();                    
                            v_LineId = selectedRows.getLineId();                         
                            v_OrgId =  selectedRows.getOrgId();                          
                            v_StgHeaderId = selectedRows.getStgHeaderId();               
                            v_stgLineId =  selectedRows.getStgLineId();                  
                            p_Rsd = selectedRows.getRsd();        
                            p_Ssd = selectedRows.getSsd();    
                            p_SAD = selectedRows.getSad();    
                            p_newreqDate = selectedRows.getNewRsd();  
                            v_Qty = selectedRows.getQuantity();  
                            log("v_Qty---->" + v_Qty);
                            v_Quantity = selectedRows.getNewQuantity(); 
                            log("v_Quantity---->" + v_Quantity);
                            db_newreqDate = selectedRows.getDbNrsd();     
                            db_Quantity = selectedRows.getDbNqty();       
                            p_changeType = null;                                
                            p_DsRuleName="CHG_ORD_APPRV_REQ";
                            p_OperUnit=selectedRows.getOperUnit();
                            log("p_OperUnit---->" + p_OperUnit);
                            p_BizClass=selectedRows.getBizClass();
                            log("p_BizClass---->" + p_BizClass);
                            p_CorpCode=selectedRows.getCustCode();
                            log("p_CorpCode---->" + p_CorpCode);
                            p_Cust5_Code=selectedRows.getCust5Code(); 
                            log("p_Cust5_Code---->" + p_Cust5_Code);
                            p_Pal=selectedRows.getPal(); 
                            log("p_Pal---->" + p_Pal);
                            p_item_number=selectedRows.getItemNumber();   
                            p_OrderType=selectedRows.getOrderType();      
                            p_dbStatus=selectedRows.getStatus();          
                            log("p_dbStatus---->" + p_dbStatus);
                            p_ItemStatus=selectedRows.getItemStatus();     
                            log("p_ItemStatus----->"+p_ItemStatus);
                            p_Mpq=selectedRows.getMpq();                  
                            log("p_Mpq----->"+p_Mpq);
                            p_CustPoNumber=selectedRows.getCustPoNumber();   
                            log("p_CustPoNumber----->"+p_CustPoNumber);
                            p_CustPoLineNumber=selectedRows.getCustPoLineNumber();
                            log("p_CustPoLineNumber----->"+p_CustPoLineNumber);
                            p_PriceList=selectedRows.getPriceList();              
                            log("p_PriceList----->"+p_PriceList);
                            p_PriceListStatus=selectedRows.getPriceListStatus();  
                            log("p_PriceListStatus----->"+p_PriceListStatus);
                            //p_cancelReason=(String)row.getAttribute("CancelReason");
                            p_cancelReason=selectedRows.getreasonCode();
                            log("Cancel Resaon Value ---->"+p_cancelReason);
                            p_resched_counter=selectedRows.getSsdResceduleCounter();
                            log("p_resched_counter Value ---->"+p_resched_counter);
                                                           
                       if (P_Status != null) 
                       {
                           if (v_Quantity != null && p_newreqDate != null) 
                           {
                               if (db_newreqDate == null) 
                               {
                                   if ((p_newreqDate).compareTo(p_Rsd) <= 0) p_changeType = "CRDPULLIN";
                                   else if ((p_newreqDate).compareTo(p_Rsd) > 0) p_changeType = "CRDPUSHOUT";
                               }
                               else
                               {
                                   if ((p_newreqDate).compareTo(db_newreqDate) > 0) p_changeType = "CRDPUSHOUT";
                                   else if ((p_newreqDate).compareTo(db_newreqDate) < 0) p_changeType = "CRDPULLIN";
                               }
                               if (db_Quantity == null || v_Quantity.compareTo(db_Quantity) != 0) 
                               {
                                   if (p_changeType != null) p_changeType = "MULTICHG";
                                   else
                                   p_changeType = "QTYDECR";
                               }
                           }
                           else if (v_Quantity != null) 
                           {
                                    if (db_Quantity == null || v_Quantity.compareTo(db_Quantity) < 0)
                                    p_changeType = "QTYDECR";
                           } 
                           else if (p_newreqDate != null) 
                           {
                                if (db_newreqDate == null) 
                                {
                                    if ((p_newreqDate).compareTo(p_Rsd) <= 0) p_changeType = "CRDPULLIN";
                                    else if ((p_newreqDate).compareTo(p_Rsd) > 0) p_changeType = "CRDPUSHOUT";
                                }
                                else
                                {
                                    if ((p_newreqDate).compareTo(db_newreqDate) > 0) p_changeType = "CRDPUSHOUT";
                                    else if ((p_newreqDate).compareTo(db_newreqDate) <= 0) p_changeType = "CRDPULLIN";
                                }
                            }
                       }                         
                          gbwChangeOrdObj= new XXONGbwChangeOrdObj(P_Status, getBigDecimal(v_HeaderId),
                                                                    getBigDecimal(v_LineId),getBigDecimal(v_StgHeaderId),
                                                                    getBigDecimal(v_stgLineId),getSqlTimeStamp(p_newreqDate),
                                                                    getSqlTimeStamp(p_Ssd),getBigDecimal(v_Quantity),
                                                                    p_changeType,getBigDecimal(v_OrgId),
                                                                    p_DsRuleName,p_OperUnit,p_BizClass,p_CorpCode,p_Cust5_Code,p_Pal,p_item_number,p_OrderType,p_cancelReason,getBigDecimal(v_Qty),getBigDecimal(orderNumber),lineNumber,getBigDecimal(p_Mpq));
                                                              
                          if(gbwChangeOrdObjArrayList == null) gbwChangeOrdObjArrayList = new ArrayList<XXONGbwChangeOrdObj>();
                          gbwChangeOrdObjArrayList.add(gbwChangeOrdObj);
                   }
                   if(gbwChangeOrdObjArrayList != null && gbwChangeOrdObjArrayList.size() > 0)
                   {
                       log("gbwChangeOrdObjArrayList size-->"+gbwChangeOrdObjArrayList.size());            
                       gbwChangeOrdArray = gbwChangeOrdObjArrayList.toArray(new XXONGbwChangeOrdObj[gbwChangeOrdObjArrayList.size()]);
                   }
                   gbwChangeOrdTab = new XXONGbwChangeOrdTab(gbwChangeOrdArray);
                   BopInsertUpdate(gbwChangeOrdTab);
               }
               catch(OAException exception)
               {
                  throw exception;
               }
               catch(Exception exception)
               {
                        throw new OAException("Error while constructing the XXONGbwChangeOrdTab Object.Error -->"+exception.getMessage(),OAException.ERROR);
               } 
 }
 
    public void passingPlannerDataToObject(String P_Status) 
    {
                  log("Start of passingDataToObject");
                  XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();
                  if(resultVO.getFetchedRowCount()<=0)
                  {
                     String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
                     throw new OAException(s1,OAException.ERROR);
                  }
                  XXONGbwSrchResultVORowImpl selectedRows=null;
                  Row[] rows = resultVO.getFilteredRows("isSelect", "Y");
                  if(rows.length<=0)
                  {
                     throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",null,OAException.ERROR,null);          
                  }
                  log("ResultVO count-->"+resultVO.getFetchedRowCount());
                  XXONGbwUtil utils= new XXONGbwUtil();
                  String accessLevel=null;
                  accessLevel=utils.respAccessLevel(getOADBTransaction());
                  int userId=getOADBTransaction().getUserId();
                  Number UserId= new Number(userId);
                  int loginId=getOADBTransaction().getLoginId();
                  Number LoginId= new Number(loginId);
                  XXONGbwChangeOrdObj            gbwChangeOrdObj             = null;
                  XXONGbwChangeOrdObj[]          gbwChangeOrdArray           = null;
                  XXONGbwChangeOrdTab            gbwChangeOrdTab             = null;
                  ArrayList<XXONGbwChangeOrdObj> gbwChangeOrdObjArrayList    = null;
                  String P_Return_Status = null;
                  String P_Error_Message = null;
                  oracle.jbo.domain.Date p_Rsd = null;
                  oracle.jbo.domain.Date p_Ssd = null;
                  oracle.jbo.domain.Date p_newRSD = null;
                  oracle.jbo.domain.Date p_newSSD = null;
                  oracle.jbo.domain.Number v_Qty = null;
                  oracle.jbo.domain.Number v_HeaderId = null;
                  oracle.jbo.domain.Number v_LineId = null;
                  oracle.jbo.domain.Number v_OrgId = null;
                  oracle.jbo.domain.Number v_stgLineId = null;
                  oracle.jbo.domain.Number v_StgHeaderId = null;
                  oracle.jbo.domain.Number v_Quantity = null;
                  oracle.jbo.domain.Number p_Mpq = null;
                  OADBTransaction transaction = getOADBTransaction();
                  oracle.jbo.domain.Date sysDate = transaction.getCurrentDBDate();
                  //int userId = transaction.getUserId();
                  oracle.jbo.domain.Date db_newRSD = null;
                  String p_changeType = null;                         
                  String p_DsRuleName=null; 
                  String p_OperUnit=null;
                  String p_BizClass=null;
                  String p_CorpCode=null;
                  String p_Cust5_Code=null;
                  String p_Pal=null;
                  String p_item_number=null;
                  String p_OrderType=null;
                  String p_cancelReason=null;
                  oracle.jbo.domain.Number orderNumber=null;
                  String lineNumber=null;
                  com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList(); 
                  try
                  {                   
                       //Row[] row = resultVO.getFilteredRows("isSelect", "Y");
                       for (int i = 0; i < rows.length; i++)
                       {
                           selectedRows = (XXONGbwSrchResultVORowImpl)rows[i];                     
                           v_HeaderId =  selectedRows.getHeaderId(); 
                           v_LineId =    selectedRows.getLineId(); 
                           v_OrgId = selectedRows.getOrgId();
                           v_stgLineId = selectedRows.getStgLineId();
                           v_StgHeaderId = selectedRows.getStgHeaderId();
                           v_Qty = selectedRows.getQuantity();
                           v_Quantity = selectedRows.getNewQuantity();
                           p_Rsd = selectedRows.getPlRsd();
                           p_newRSD = selectedRows.getPlNewrsd();
                           p_Ssd = selectedRows.getSsd();
                           p_newSSD = selectedRows.getNewSsd();
                           db_newRSD = selectedRows.getDbPlnewrsd();
                           p_changeType = null;
                           
                           p_DsRuleName="CHG_ORD_APPRV_REQ";
                           p_OperUnit= selectedRows.getOperUnit(); 
                           p_BizClass=selectedRows.getBizClass();
                           p_CorpCode=selectedRows.getCustCode();
                           p_Cust5_Code=selectedRows.getCust5Code();
                           p_Pal=selectedRows.getPal();             
                           p_item_number=selectedRows.getItemNumber();
                           p_OrderType=selectedRows.getOrderType();
                           p_changeType=selectedRows.getChangeType();
                           p_cancelReason=selectedRows.getreasonCode();
                           //p_cancelReason=selectedRows.getCancelReason();
                           orderNumber=selectedRows.getOrderNumber();
                           lineNumber=selectedRows.getLineNumber();
                           p_Mpq=selectedRows.getMpq();
                           MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber.toString()),new MessageToken("LINENUMBER",   lineNumber)};
                                                           
                           gbwChangeOrdObj= new XXONGbwChangeOrdObj(P_Status, getBigDecimal(v_HeaderId),
                                                                        getBigDecimal(v_LineId),getBigDecimal(v_StgHeaderId),
                                                                        getBigDecimal(v_stgLineId),getSqlTimeStamp(p_newRSD),
                                                                        getSqlTimeStamp(p_newSSD),getBigDecimal(v_Qty),
                                                                        p_changeType,getBigDecimal(v_OrgId),
                                                                        p_DsRuleName,p_OperUnit,p_BizClass,p_CorpCode,p_Cust5_Code,p_Pal,p_item_number,p_OrderType,p_cancelReason,getBigDecimal(v_Quantity),getBigDecimal(orderNumber),lineNumber,getBigDecimal(p_Mpq));
                                                                  
                              if(gbwChangeOrdObjArrayList == null) gbwChangeOrdObjArrayList = new ArrayList<XXONGbwChangeOrdObj>();
                              gbwChangeOrdObjArrayList.add(gbwChangeOrdObj);
                       } //End of for loop.                       
                       
                       OAException.raiseBundledOAException(exceptions); 
                       if(gbwChangeOrdObjArrayList != null && gbwChangeOrdObjArrayList.size() > 0)
                       {
                           log("gbwChangeOrdObjArrayList size-->"+gbwChangeOrdObjArrayList.size());            
                           gbwChangeOrdArray = gbwChangeOrdObjArrayList.toArray(new XXONGbwChangeOrdObj[gbwChangeOrdObjArrayList.size()]);
                       }
                       gbwChangeOrdTab = new XXONGbwChangeOrdTab(gbwChangeOrdArray);
                       BopInsertUpdate(gbwChangeOrdTab);
                   }
                   catch(OAException exception)
                   {
                      throw exception;
                   }
                   catch(Exception exception)
                   {
                            throw new OAException("Error while constructing the XXONGbwChangeOrdTab Object.Error -->"+exception.getMessage(),OAException.ERROR);
                   } 
     }
     
    public void cancelChangeOrder(String P_Status) 
    {
        log("Start of cancelChangeOrder");
        XXONGbwSrchResultVOImpl resultVO=getXXONGbwSrchResultVO1();
        if(resultVO.getFetchedRowCount()<=0)
        {
           String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
           throw new OAException(s1,OAException.ERROR);
        }
        XXONGbwSrchResultVORowImpl selectedRows=null;
        Row[] rows = resultVO.getFilteredRows("isSelect", "Y");
        if(rows.length<=0)
        {
           throw new OAException("XXON","XXON_OM_GBW_NO_REC_CANCEL_ERR",null,OAException.ERROR,null);          
        }
        log("ResultVO count-->"+resultVO.getFetchedRowCount());
        XXONGbwUtil utils= new XXONGbwUtil();
        String accessLevel=null;
        accessLevel=utils.respAccessLevel(getOADBTransaction());               
        XXONGbwChangeOrdObj            gbwChangeOrdObj             = null;
        XXONGbwChangeOrdObj[]          gbwChangeOrdArray           = null;
        XXONGbwChangeOrdTab            gbwChangeOrdTab             = null;
        ArrayList<XXONGbwChangeOrdObj> gbwChangeOrdObjArrayList    = null;        
        oracle.jbo.domain.Date p_Rsd = null;
        oracle.jbo.domain.Date p_Ssd = null;
        oracle.jbo.domain.Date p_newRSD = null;
        oracle.jbo.domain.Date p_newSSD = null;
        oracle.jbo.domain.Number v_Qty = null;
        oracle.jbo.domain.Number v_HeaderId = null;
        oracle.jbo.domain.Number v_LineId = null;
        oracle.jbo.domain.Number v_OrgId = null;
        oracle.jbo.domain.Number v_stgLineId = null;
        oracle.jbo.domain.Number v_StgHeaderId = null;
        oracle.jbo.domain.Number v_Quantity = null;
        oracle.jbo.domain.Number p_Mpq = null;
        
        oracle.jbo.domain.Date db_newRSD = null;
        String p_changeType = null;                         
        String p_DsRuleName=null; 
        String p_OperUnit=null;
        String p_BizClass=null;
        String p_CorpCode=null;
        String p_Cust5_Code=null;
        String p_Pal=null;
        String p_item_number=null;
        String p_OrderType=null;
        String p_cancelReason=null;
        oracle.jbo.domain.Number orderNumber=null;
        String lineNumber=null;
        String p_orderHold=null;
        String p_status=null;
        com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
        oracle.jbo.domain.Date p_newreqDate;
        try
        {                   
             for (int i = 0; i < rows.length; i++)
             {
                 selectedRows = (XXONGbwSrchResultVORowImpl)rows[i];                     
                 v_HeaderId =  selectedRows.getHeaderId(); 
                 v_LineId =    selectedRows.getLineId(); 
                 v_OrgId = selectedRows.getOrgId();
                 v_stgLineId = selectedRows.getStgLineId();
                 v_StgHeaderId = selectedRows.getStgHeaderId();
                 v_Qty = selectedRows.getQuantity();
                 v_Quantity = selectedRows.getNewQuantity();
                 p_Rsd = selectedRows.getPlRsd();
                 p_newRSD = selectedRows.getPlNewrsd();
                 p_Ssd = selectedRows.getSsd();
                 p_newSSD = selectedRows.getNewSsd();
                 db_newRSD = selectedRows.getDbPlnewrsd();
                 p_changeType = null;
                 
                 p_DsRuleName="CHG_ORD_APPRV_REQ";
                 p_OperUnit= selectedRows.getOperUnit(); 
                 p_BizClass=selectedRows.getBizClass();
                 p_CorpCode=selectedRows.getCustCode();
                 p_Cust5_Code=selectedRows.getCust5Code();
                 p_Pal=selectedRows.getPal();             
                 p_item_number=selectedRows.getItemNumber();
                 p_OrderType=selectedRows.getOrderType();
                 p_changeType=selectedRows.getChangeType();
                 p_cancelReason=selectedRows.getreasonCode();                 
                 orderNumber=selectedRows.getOrderNumber();
                 lineNumber=selectedRows.getLineNumber();
                 p_Mpq=selectedRows.getMpq();
                 p_newreqDate=selectedRows.getNewRsd();
                 p_orderHold=selectedRows.getOrderHold();
                 p_status=selectedRows.getStatus();
                 log("p_status  -->"+p_status);
                 log("p_orderHold -->"+p_status);
                 
                 MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber.toString()),new MessageToken("LINENUMBER",   lineNumber)};                 
                /* if((p_newreqDate==null||p_newreqDate.equals("")) && (v_Quantity==null || v_Quantity.equals(""))) 
                 {
                    exceptions.add(new OAException("XXON","XXON_OM_GBW_NO_CHANGE_ERR",tokens,OAException.INFORMATION,null));
                 }*/
                 
                 if(p_status!=null && !p_status.equals("APPROVAL_PENDING") || p_orderHold!=null && !p_orderHold.equals("Y")) 
                 {
                     exceptions.add(new OAException("XXON","XXON_OM_GBW_CAN_STATUS_ERR",tokens,OAException.INFORMATION,null));     
                 }
                 gbwChangeOrdObj= new XXONGbwChangeOrdObj(P_Status, getBigDecimal(v_HeaderId),
                                                              getBigDecimal(v_LineId),getBigDecimal(v_StgHeaderId),
                                                              getBigDecimal(v_stgLineId),getSqlTimeStamp(p_newRSD),
                                                              getSqlTimeStamp(p_newSSD),getBigDecimal(v_Qty),
                                                              p_changeType,getBigDecimal(v_OrgId),
                                                              p_DsRuleName,p_OperUnit,p_BizClass,p_CorpCode,p_Cust5_Code,p_Pal,p_item_number,p_OrderType,p_cancelReason,getBigDecimal(v_Quantity),getBigDecimal(orderNumber),lineNumber,getBigDecimal(p_Mpq));
                                                        
                    if(gbwChangeOrdObjArrayList == null) gbwChangeOrdObjArrayList = new ArrayList<XXONGbwChangeOrdObj>();
                    gbwChangeOrdObjArrayList.add(gbwChangeOrdObj);
             }
             OAException.raiseBundledOAException(exceptions); 
             if(gbwChangeOrdObjArrayList != null && gbwChangeOrdObjArrayList.size() > 0)
             {
                 log("gbwChangeOrdObjArrayList size-->"+gbwChangeOrdObjArrayList.size());            
                 gbwChangeOrdArray = gbwChangeOrdObjArrayList.toArray(new XXONGbwChangeOrdObj[gbwChangeOrdObjArrayList.size()]);
             }
             gbwChangeOrdTab = new XXONGbwChangeOrdTab(gbwChangeOrdArray);
             BopInsertUpdate(gbwChangeOrdTab);
         }
         catch(OAException exception)
         {
            throw exception;
         }
         catch(Exception exception)
         {
                  throw new OAException("Error while constructing the XXONGbwChangeOrdTab Object.Error -->"+exception.getMessage(),OAException.ERROR);
         }
    }
 
    public void BopInsertUpdate(XXONGbwChangeOrdTab gbwChangeOrdTab) 
    {
        log("Start of BOP Records update Method");
        String P_Return_Status=null;
        String P_Error_Message=null;
        OADBTransaction transaction = getOADBTransaction();
        Connection connection = getOADBTransaction().getJdbcConnection();
        OracleCallableStatement cs = null;        
        ARRAY  errorARRAY                                = null;
        String[] errorRecordArray                        = null;
        com.sun.java.util.collections.ArrayList exceptionsList = new com.sun.java.util.collections.ArrayList(); 
        //String str = "BEGIN XXON_OM_GBW_UTILS_PKG.BOP_RECORDS_UPDATE(:1,:2,:3); END;";
        //Added below code on 8th jun'18 by raghu
         int p_user_id = getOADBTransaction().getUserId();
         log("p_user_id----->"+p_user_id);
         int p_resp_id = getOADBTransaction().getResponsibilityId();
         log("p_resp_id----->"+p_resp_id);
         int p_resp_appl_id = getOADBTransaction().getResponsibilityApplicationId(); 
         log("p_resp_appl_id----->"+p_resp_appl_id);
         String str = "BEGIN XXON_OM_GBW_UTILS_PKG.BOP_RECORDS_UPDATE(:1,:2,:3,:4,:5,:6); END;";
        try
        {
            cs = (OracleCallableStatement)connection.prepareCall(str);
            cs.setObject(1, gbwChangeOrdTab, OracleTypes.ARRAY); 
            //Added below code by raghu on 8th jun'18
            cs.setInt(2,p_user_id);
            cs.setInt(3,p_resp_id);
            cs.setInt(4,p_resp_appl_id);
            cs.registerOutParameter(5, OracleTypes.VARCHAR);            
            cs.registerOutParameter(6,OracleTypes.ARRAY,"XXON_OM_GBW_ERROR_MSG_TAB");
            cs.execute();
            P_Return_Status = cs.getString(5);
            log("Status form Pl/Sql Programs is -----> " +P_Return_Status);            
            if (P_Return_Status != null && P_Return_Status.trim().length() > 0 && P_Return_Status.equalsIgnoreCase("E"))
            {   
                errorARRAY = cs.getARRAY(6);
                errorRecordArray = (String[])errorARRAY.getArray();
            }                        
            else   // (P_Return_Status.equalsIgnoreCase("S")) 
            {
                transaction.commit();
                log("After plsql success block...");
            }
            cs.close();                        
        } 
        catch (Exception e) 
        {
            log("Catch Block Log Message----->" + e.getMessage());
            throw new OAException("Error in Catch Block.."+e.getMessage(), OAException.ERROR);
        }
        finally
        {
            try{
                if(cs != null) cs.close();
               }
            catch(Exception e)
            {
                log("error while closing callable statment");
            }
        }
        if(errorRecordArray != null && errorRecordArray.length > 0)
        {
            for(int ind=0;ind<errorRecordArray.length;ind++)
            {
                log("errorMessages-----> "+errorRecordArray[ind]);
                exceptionsList.add( new OAException(errorRecordArray[ind],OAException.ERROR));
            }
            if(exceptionsList.size() > 0)
            {
                OAException.raiseBundledOAException(exceptionsList);
            }
            else
            {
                  throw new OAException("An unknown error occured and please try to resubmit the transaction. ",OAException.ERROR);
            }
            transaction.rollback();
         }
    }
    
    //getOrderType Method...
    public String getOrderType(oracle.jbo.domain.Number p_oe_lineId) 
    {
        log("getOrderType...");
        String l_order_type=null;
        PreparedStatement preparedstatement = null;
        ResultSet resultset = null;
        OracleConnection conn = (OracleConnection)getOADBTransaction().getJdbcConnection();
        try
               {
                   String s1 = "SELECT ottl.name             \n" + 
                   "              FROM oe_transaction_types_all ott\n" + 
                   "                  ,oe_transaction_types_tl  ottl\n" + 
                   "                  ,oe_order_headers_all     ooha\n" + 
                   "                  ,oe_order_lines_all       oola\n" + 
                   "             WHERE ooha.header_id = oola.header_id\n" + 
                   "               AND oola.line_id = :1\n" + 
                   "               AND ott.transaction_type_id = ottl.transaction_type_id\n" + 
                   "               AND ott.transaction_type_code = 'ORDER'\n" + 
                   "               AND ott.order_category_code = 'ORDER'\n" + 
                   "               AND ottl.language = userenv('LANG')\n" + 
                   "               AND ott.transaction_type_id = ooha.order_type_id";
                   preparedstatement = conn.prepareStatement(s1);
                   preparedstatement.setInt(1, p_oe_lineId.intValue());
                   resultset = preparedstatement.executeQuery();
              
                   if(resultset.next())
                   {
                       l_order_type = resultset.getString(1);
                       log("l_order_type -->"+l_order_type);
                       resultset.close();
                       preparedstatement.close(); 
                   }
               }
               catch(Exception e)
               {
                   throw OAException.wrapperException(e);
               }
               return l_order_type;
    }
    
    //Enforce mpq rule validation..
     public String mpqValidation(String p_ds_rule_name,String p_ou,String p_business_class,String p_corp_code,String p_site_code, String p_pal2_code,String p_item_number,String p_order_type,oracle.jbo.domain.Number p_oe_lineId) 
     {
         log("mpqValidation method");
         log("p_order_type value :"+p_order_type);
         String l_orderType=getOrderType(p_oe_lineId);
         log("l_orderType value in mpqValidation -->"+l_orderType);
         String r_output = ""; 
         String stmt = "BEGIN :1 := xxon_bop_utils.get_ds_rule_value_char(:2,:3,:4,:5,:6,:7,:8,:9); end;";
         CallableStatement cs = getOADBTransaction().createCallableStatement(stmt, 1);
         try {
                cs.registerOutParameter(1, OracleTypes.VARCHAR);
                cs.setString(2, p_ds_rule_name);
                cs.setString(3, p_ou);
                cs.setString(4, p_business_class);
                cs.setString(5, p_corp_code);
                cs.setString(6, p_site_code);
                cs.setString(7, p_pal2_code);
                cs.setString(8, p_item_number);
                cs.setString(9, l_orderType);
                cs.execute();
                r_output = cs.getString(1);
                cs.close();
            } catch (Exception e) 
            {
             e.printStackTrace();
            }
            log("r_output -->"+r_output);
            return r_output;
     }
    
    //LOG MESSAGE METHOD...    

    private void log(String Message) 
    {
        //System.out.println(Message);
        if (getOADBTransaction().isLoggingEnabled(1)) {
            getOADBTransaction().writeDiagnostics(this, Message, 1);
        }

    }
    
  // MPQ Validation's confirmation page..
  private void showWarningDialogPage(OAPageContext pageContext,String procedure,String additionalText,Hashtable parameters) 
  {
    String warningMsg="";
  }

    /**Container's getter for XXONGbwOperatingUnitVO1
     */
    public XXONGbwOperatingUnitVOImpl getXXONGbwOperatingUnitVO1() {
        return (XXONGbwOperatingUnitVOImpl)findViewObject("XXONGbwOperatingUnitVO1");
    }


    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) { /* package name */
        /* Configuration Name */launchTester("oracle.apps.xxon.om.gbw.chgord.server", 
                                             "XXONGbwChangeOrderAMLocal");
    }


    /**Container's getter for XXONGbwOpnLovVO1
     */
    public XXONGbwOpnLovVOImpl getXXONGbwOpnLovVO1() {
        return (XXONGbwOpnLovVOImpl)findViewObject("XXONGbwOpnLovVO1");
    }

    /**Container's getter for XXONGbwPackageLovVO1
     */
    public XXONGbwPackageLovVOImpl getXXONGbwPackageLovVO1() {
        return (XXONGbwPackageLovVOImpl)findViewObject("XXONGbwPackageLovVO1");
    }

    /**Container's getter for XXONGbwRecordsDisplayVO1
     */
    public XXONGbwRecordsDisplayVOImpl getXXONGbwRecordsDisplayVO1() {
        return (XXONGbwRecordsDisplayVOImpl)findViewObject("XXONGbwRecordsDisplayVO1");
    }

    /**Container's getter for XXONGbwCorpCodeLovVO1
     */
    public XXONGbwCorpCodeLovVOImpl getXXONGbwCorpCodeLovVO1() {
        return (XXONGbwCorpCodeLovVOImpl)findViewObject("XXONGbwCorpCodeLovVO1");
    }

    /**Container's getter for XXONGbwCust5CodeLovVO1
     */
    public XXONGbwCust5CodeLovVOImpl getXXONGbwCust5CodeLovVO1() {
        return (XXONGbwCust5CodeLovVOImpl)findViewObject("XXONGbwCust5CodeLovVO1");
    }

    /**Container's getter for XXONGbwOrderTypeVO1
     */
    public XXONGbwOrderTypeVOImpl getXXONGbwOrderTypeVO1() {
        return (XXONGbwOrderTypeVOImpl)findViewObject("XXONGbwOrderTypeVO1");
    }


    /**Container's getter for XXONGbwDummyVO1
     */
    public XXONGbwDummyVOImpl getXXONGbwDummyVO1() {
        return (XXONGbwDummyVOImpl)findViewObject("XXONGbwDummyVO1");
    }

    /**Container's getter for XXONGbwCancelReasonCodeVO1
     */
    public XXONGbwCancelReasonCodeVOImpl getXXONGbwCancelReasonCodeVO1() {
        return (XXONGbwCancelReasonCodeVOImpl)findViewObject("XXONGbwCancelReasonCodeVO1");
    }

    /**Container's getter for XXONGbwSrchResultVO1
     */
    public XXONGbwSrchResultVOImpl getXXONGbwSrchResultVO1() {
        return (XXONGbwSrchResultVOImpl)findViewObject("XXONGbwSrchResultVO1");
    }
}
