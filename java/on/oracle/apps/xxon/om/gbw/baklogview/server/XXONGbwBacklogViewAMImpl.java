package oracle.apps.xxon.om.gbw.baklogview.server;

import java.math.BigDecimal;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.UUID;

import oracle.apps.fnd.common.MessageToken;
import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;
import oracle.apps.fnd.framework.server.OADBTransaction;
import oracle.apps.xxon.om.gbw.baklogview.beans.XXONGbwRescheFrObj;
import oracle.apps.xxon.om.gbw.baklogview.beans.XXONGbwRescheFrTab;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCorpCodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwCust5CodeLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwDemandBankLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwOperatingUnitLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPackageLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwPtiLovVOImpl;
import oracle.apps.xxon.om.gbw.lov.server.XXONGbwRescheduleReasonLovVOImpl;
import oracle.apps.xxon.om.gbw.shipord.server.XXONGbwDateRangeVOImpl;
import oracle.apps.xxon.om.gbw.util.XXONGbwUtil;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleTypes;

import oracle.sql.ARRAY;
import oracle.sql.NUMBER;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class XXONGbwBacklogViewAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public XXONGbwBacklogViewAMImpl() {
    }
    String respKey=null;
    HashMap oldSsdRecord = new HashMap();
    HashMap oldSirRecord = new HashMap();   
    XXONGbwUtil utils= new XXONGbwUtil();
    String respAccess=null;
   String allOrderTypeQuery="  SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_resched_fr_v\n" + 
    "    UNION ALL\n" + 
    "    SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_fcst_reserv_v";
    
    String allOrderTypeQueryExclFr="SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_resched_fr_v";
    
    String orderTypeExcludeQuery="  SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_exclude_ordtype_v\n" + 
    "    UNION ALL\n" + 
    "    SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_fcst_reserv_v";
    String orderTypeExcludeQueryExclFr="SELECT   opn,\n" + 
    "           customer_code,\n" + 
    "           cust5_code,\n" + 
    "           order_hold,\n" + 
    "           order_type,\n" + 
    "           order_number,\n" + 
    "           line_number,\n" + 
    "           rsd,\n" + 
    "           ssd,\n" + 
    "           reschedule_reason,\n" + 
    "           quantity,\n" + 
    "           NULL cumulative_quantity,\n" + 
    "           pegging_detail,\n" + 
    "           product_category,\n" + 
    "           scheduling_return,\n" + 
    "           mp_date,\n" + 
    "           csr,\n" + 
    "           split_flag,\n" + 
    "           item_planner AS item_planner,\n" + 
    "           rsd rsd_db,\n" + 
    "           ssd ssd_db,\n" + 
    "           quantity quantity_db,\n" + 
    "           coi,\n" + 
    "           pkg,\n" + 
    "           pal,\n" + 
    "           operating_unit,\n" + 
    "           demand_type,\n" + 
    "           status,\n" + 
    "           inventory_item_id,\n" + 
    "           line_id,\n" + 
    "           header_id,\n" + 
    "           reservtn_id,\n" + 
    "           demand_bank,\n" + 
    "           lead_time,\n" + 
    "           max_quantity_lead_time,\n" + 
    "           mpq,\n" + 
    "           organization_id,\n" + 
    "           legacy_so,\n" + 
    "           rush_order_flag,\n" + 
    "           rush_order_flag AS rush_order_flag_db,\n" + 
    "           sad,\n" + 
    "           rd,\n" + 
    "           legacy_line_number,\n" + 
    "           site_use_code,\n" + 
    "           ssd_rescedule_counter,\n" + 
    "           po_number\n" + 
    "    FROM   xxon_om_gbw_exclude_ordtype_v";
    public void initCriteriaValuesVO()
    {
        XXONGbwSearchCriteriaValuesVOImpl criteriaValuesVO=getXXONGbwSearchCriteriaValuesVO1();
        if(!criteriaValuesVO.isExecuted())
        {
            criteriaValuesVO.executeQuery();
        }
    }
    
    public void recDisInit()
    {
        XXONGbwRecordsDisplayVOImpl recordsDisplayVO=getXXONGbwRecordsDisplayVO1();
        if(!recordsDisplayVO.isExecuted())
        {
            recordsDisplayVO.executeQuery();
        }
     }

    /**
     * excute the result view object.     
     */
 public void ExecuteResultVO(String actionType)
 {
    log("Start of ExecuteResultVO-->");
    log("actionType-->"+actionType);
    try{          
        respAccess=utils.respAccessLevel(getOADBTransaction());
        log("respAccess-->"+respAccess); 
     XXONGbwSearchCriteriaValuesVOImpl criteriaValuesVO=getXXONGbwSearchCriteriaValuesVO1();
     XXONGbwSearchCriteriaValuesVORowImpl criteriaValuesVORow=(XXONGbwSearchCriteriaValuesVORowImpl)criteriaValuesVO.first();
     String opn=null;
     String pal=null;
     String pkg=null;
     String coi=null;
     String corpcode=null;
     String cust5code=null;
     String demandBank=null;
     String ordernumber=null;
     String unscheDemands=null;
     String mismachedDates=null;
     String oUnit=null;
     String ouName=null;
     String orderType=null;
     String legacySo=null;
     String lineNumber=null;
     String dateRange=null;
     String poNumber=null;
     String scheduledDemands=null;
     String excludeFr=null;
     opn=criteriaValuesVORow.getOpn();
     pal=criteriaValuesVORow.getPal();
     pkg=criteriaValuesVORow.getPkg();
     coi=criteriaValuesVORow.getCoi();
     corpcode=criteriaValuesVORow.getCorpCode();
     cust5code=criteriaValuesVORow.getCust5Code();
     demandBank=criteriaValuesVORow.getDemandBank();
     ordernumber=criteriaValuesVORow.getOrderNumber();
     unscheDemands=criteriaValuesVORow.getUnscheduledDemands();
     mismachedDates=criteriaValuesVORow.getMismatchedDemands();
     oUnit=criteriaValuesVORow.getOrgId();
     ouName=criteriaValuesVORow.getOpUnit();
     orderType=criteriaValuesVORow.getOrderType();
     legacySo=criteriaValuesVORow.getlegacySo();
     lineNumber=criteriaValuesVORow.getlineNumber();
     dateRange=criteriaValuesVORow.getDateRange();
     poNumber=criteriaValuesVORow.getPoNumber();
     scheduledDemands=criteriaValuesVORow.getScheduledDemands();
     excludeFr=criteriaValuesVORow.getExcludeFr();
        if(ouName==null)
        {
            oUnit=null;
        }
        log("opn-->"+opn);
        log("pal-->"+pal);
        log("pkg-->"+pkg);
        log("coi-->"+coi);
        log("corpcode-->"+corpcode);
        log("cust5code-->"+cust5code);
        log("demandBank-->"+demandBank);
        log("ordernumber-->"+ordernumber);
        log("unscheDemands-->"+unscheDemands);
        log("mismachedDates-->"+mismachedDates);
        log("oUnit-->"+oUnit);
        log("ouName-->"+ouName);
        log("orderType-->"+orderType);
        log("legacySo-->"+legacySo);
        log("lineNumber-->"+lineNumber);
        log("dateRange-->"+dateRange);
        log("poNumber-->"+poNumber);
        log("scheduledDemands-->"+scheduledDemands);
        log("excludeFr-->"+excludeFr);    
        int limitParamCount=0;
     XXONGbwBaklogViewResultVOImpl viewResultVO=getXXONGbwBaklogViewResultVO1();
     viewResultVO.setFullSqlMode(viewResultVO.FULLSQL_MODE_AUGMENTATION);      
     viewResultVO.setWhereClause(null);
     viewResultVO.setWhereClauseParams(null);   
     if(excludeFr!=null&&excludeFr.equalsIgnoreCase("Y"))
     {
         limitParamCount++;
         viewResultVO.setQuery(orderTypeExcludeQueryExclFr);
     }else{
         viewResultVO.setQuery(orderTypeExcludeQuery);
     }
      int javaBindNum=0;
      Boolean includeOrderByClause=Boolean.TRUE;
      
        // search criteria values validation        
      if(orderType!=null&&orderType.trim().length()>0)
      {
           if(orderType.toUpperCase().contains("CONSUMPTION"))
           {
               if(demandBank==null) throw new OAException("XXON","XXON_OM_GBW_DBANK_ERR",null,OAException.ERROR,null);
           }else{
                  log("opn-->"+opn);
                  if(opn==null)
                  {
                    throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR9",null,OAException.ERROR,null);
                  }
             }
           if((orderType.toUpperCase().contains("CONSUMPTION"))||(orderType.toUpperCase().contains("SAMPLE")))
           {
               if(excludeFr!=null&&excludeFr.equalsIgnoreCase("Y"))
               {
                   viewResultVO.setQuery(allOrderTypeQueryExclFr);
               }else{
                   viewResultVO.setQuery(allOrderTypeQuery);
               }
           }
      }
       boolean isLegacySoEntered=Boolean.FALSE;
        if((unscheDemands!=null&&unscheDemands.equalsIgnoreCase("Y"))&&(scheduledDemands!=null&&scheduledDemands.equalsIgnoreCase("Y")))
        {
            throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR19",null,OAException.ERROR,null);
            // throw new OAException("Only one filter allowed either Unscheduled Demands or Scheduled Demands",OAException.ERROR);
        }
        
        if(pal!=null&&pal.trim().length()>0&&pal.contains("%"))
        {
           throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR1",null,OAException.ERROR,null);
         
        }
        if(ordernumber!=null&&ordernumber.trim().length()>0&&ordernumber.contains("%"))
        {
          throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR2",null,OAException.ERROR,null);         
        }
        if(legacySo!=null&&legacySo.trim().length()>0&&legacySo.contains("%"))
        {
           throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR3",null,OAException.ERROR,null);
            
        }
        if(lineNumber!=null&&lineNumber.trim().length()>0&&lineNumber.contains("%"))
        {
           throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR4",null,OAException.ERROR,null);
        }
        if(poNumber!=null&&poNumber.trim().length()>0&&poNumber.contains("%"))
        {
           throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR8",null,OAException.ERROR,null);
        }
        if(legacySo!=null&&legacySo.trim().length()>0)
         {
             isLegacySoEntered=Boolean.TRUE;
         } 
        if(lineNumber!=null&&lineNumber.trim().length()>0)
         {
            if(!isLegacySoEntered)
            {
                //throw new OAException("Please enter valid Legacy SO to perform Legacy Line# serach.",OAException.ERROR);
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR5",null,OAException.ERROR,null);
            }
         
         } 
       
        // End
    viewResultVO.setWhereClause("1=1");
     if(opn!=null&&opn.trim().length()>0)
     {
      if(opn.contains("%"))
      {
         javaBindNum++;  
         viewResultVO.addWhereClause(" AND OPN LIKE :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,opn.toUpperCase());
      }else{
          javaBindNum++;  
          viewResultVO.addWhereClause(" AND OPN = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,opn.toUpperCase());
      }
     }
     if(pal!=null&&pal.trim().length()>0)
     {
      
        if(pal.length()>3)
        {
           javaBindNum++;         
           viewResultVO.addWhereClause(" AND PAL = :"+javaBindNum);
           viewResultVO.setWhereClauseParam(javaBindNum-1,pal.toUpperCase());
        }else if(pal.length()==3)
        {
            javaBindNum++;         
            viewResultVO.addWhereClause(" AND SUBSTR(PAL,0,3) = :"+javaBindNum);
            viewResultVO.setWhereClauseParam(javaBindNum-1,pal.toUpperCase());
        }else if(pal.length()==2)
        {
            javaBindNum++;         
            viewResultVO.addWhereClause(" AND SUBSTR(PAL,0,2) = :"+javaBindNum);
            viewResultVO.setWhereClauseParam(javaBindNum-1,pal.toUpperCase());
        }
      
     }
     if(pkg!=null&&pkg.trim().length()>0)
     {
      if(pkg.contains("%"))
      {
         javaBindNum++; 
         viewResultVO.addWhereClause(" AND PKG LIKE :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,pkg.toUpperCase());
      }else{
          javaBindNum++; 
          viewResultVO.addWhereClause(" AND PKG = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,pkg.toUpperCase());
      }
     }
     if(coi!=null&&coi.trim().length()>0)
     {
      if(coi.contains("%"))
      {
         javaBindNum++;         
         viewResultVO.addWhereClause(" AND COI LIKE :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,coi.toUpperCase());
      }else{
          javaBindNum++;         
          viewResultVO.addWhereClause(" AND COI = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,coi.toUpperCase());
      }
     }
     if(cust5code!=null&&cust5code.trim().length()>0)
     {
      if(cust5code.contains("%"))
      {
         javaBindNum++; 
         viewResultVO.addWhereClause(" AND CUST5_CODE LIKE :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,cust5code.toUpperCase());
      }else{
          javaBindNum++; 
          viewResultVO.addWhereClause(" AND CUST5_CODE = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,cust5code.toUpperCase());
      }
     }
     if(corpcode!=null&&corpcode.trim().length()>0)
     {
      if(corpcode.contains("%"))
      {
         javaBindNum++;  
         viewResultVO.addWhereClause(" AND CUSTOMER_CODE LIKE :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,corpcode.toUpperCase());
      }else{
          javaBindNum++;  
          viewResultVO.addWhereClause(" AND CUSTOMER_CODE = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,corpcode.toUpperCase());
      }
     }
     if(ordernumber!=null&&ordernumber.trim().length()>0)
     {
     
          javaBindNum++;         
          viewResultVO.addWhereClause(" AND ORDER_NUMBER = :"+javaBindNum);
          viewResultVO.setWhereClauseParam(javaBindNum-1,ordernumber.toUpperCase());
      
     }
     if(ouName!=null&&oUnit!=null&&oUnit.trim().length()>0)
     {
       if(opn==null)
       {
         throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR14",null,OAException.ERROR,null);
       }
         javaBindNum++;
         viewResultVO.addWhereClause(" AND OPERATING_UNIT = :"+javaBindNum);
         viewResultVO.setWhereClauseParam(javaBindNum-1,oUnit);
     }
       if(demandBank!=null&&demandBank.trim().length()>0)
        {
         if(demandBank.contains("%"))
         {
            javaBindNum++;
            viewResultVO.addWhereClause(" AND DEMAND_BANK LIKE :"+javaBindNum);
            viewResultVO.setWhereClauseParam(javaBindNum-1,demandBank.toUpperCase());
         }else{
             javaBindNum++;
             viewResultVO.addWhereClause(" AND DEMAND_BANK = :"+javaBindNum);
             viewResultVO.setWhereClauseParam(javaBindNum-1,demandBank.toUpperCase());
         }
        }
           
        if(orderType!=null&&orderType.trim().length()>0)
         {
          if(orderType.contains("%"))
          {
             javaBindNum++;
             viewResultVO.addWhereClause(" AND ORDER_TYPE LIKE :"+javaBindNum);
             viewResultVO.setWhereClauseParam(javaBindNum-1,orderType);
          }else{
              javaBindNum++;
              viewResultVO.addWhereClause(" AND ORDER_TYPE = :"+javaBindNum);
              viewResultVO.setWhereClauseParam(javaBindNum-1,orderType);
          }
         } 
        if(legacySo!=null&&legacySo.trim().length()>0)
         {
          
              javaBindNum++;
              viewResultVO.addWhereClause(" AND LEGACY_SO = :"+javaBindNum);
              viewResultVO.setWhereClauseParam(javaBindNum-1,legacySo);
             
         } 
        if(lineNumber!=null&&lineNumber.trim().length()>0)
         {
              javaBindNum++;
              viewResultVO.addWhereClause(" AND LEGACY_LINE_NUMBER = :"+javaBindNum);
              viewResultVO.setWhereClauseParam(javaBindNum-1,lineNumber);
          
         } 
       
        if(poNumber!=null&&poNumber.trim().length()>0)
         {
              javaBindNum++;
              viewResultVO.addWhereClause(" AND PO_NUMBER = :"+javaBindNum);
              viewResultVO.setWhereClauseParam(javaBindNum-1,poNumber);
          
         } 
        if(dateRange!=null&&dateRange.trim().length()>0&&!dateRange.equalsIgnoreCase("0"))
         {
              javaBindNum++;
              viewResultVO.addWhereClause(" AND ( TRUNC(NVL(SSD,SYSDATE)) <  TRUNC(SYSDATE) + "+dateRange+")");
        } 
     if(unscheDemands.equalsIgnoreCase("Y")&&mismachedDates.equalsIgnoreCase("Y"))
       {
            //javaBindNum++; 
             limitParamCount++;
           viewResultVO.addWhereClause(" AND (SSD IS NULL OR RSD<>SSD) ");
      }else if(scheduledDemands.equalsIgnoreCase("Y")&&mismachedDates.equalsIgnoreCase("Y"))
      {
           // javaBindNum++;     
            limitParamCount++;
          viewResultVO.addWhereClause(" AND (SSD IS NOT NULL OR RSD<>SSD) ");
      }else if(scheduledDemands.equalsIgnoreCase("Y")||mismachedDates.equalsIgnoreCase("Y")||unscheDemands.equalsIgnoreCase("Y"))
      {
           // javaBindNum++;  
            limitParamCount++;
          if(unscheDemands.equalsIgnoreCase("Y")) viewResultVO.addWhereClause(" AND SSD IS NULL ");
          if(scheduledDemands.equalsIgnoreCase("Y")) viewResultVO.addWhereClause(" AND SSD IS NOT NULL ");
          if(mismachedDates.equalsIgnoreCase("Y")) viewResultVO.addWhereClause(" AND SSD<>RSD ");
      }      
       if(javaBindNum==1&&demandBank!=null&&demandBank.trim().length()>0)
       {
        throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR6",null,OAException.ERROR,null);
       }
        log("javaBindNum-->"+javaBindNum);
        if(javaBindNum==1&&orderType!=null&&orderType.trim().length()>0)
        {
           throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR7",null,OAException.ERROR,null);
        }  
        log("javaBindNum2-->"+javaBindNum);
            if(javaBindNum==1&&opn!=null&&opn.trim().length()>0)
            {
               log("includeOrderByClause-->"+includeOrderByClause);
                includeOrderByClause=Boolean.FALSE;
               // throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR10",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&corpcode!=null&&corpcode.trim().length()>0)
            {
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR11",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&cust5code!=null&&cust5code.trim().length()>0)
            {
               throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR12",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&coi!=null&&coi.trim().length()>0)
            {
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR13",null,OAException.ERROR,null);
            } 
            if(javaBindNum==2&&(opn!=null&&opn.trim().length()>0&&ouName!=null&&oUnit!=null&&oUnit.trim().length()>0))
            {
               throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR14",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&(oUnit!=null&&oUnit.trim().length()>0))
            {
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR14",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&(pal!=null&&pal.trim().length()>0&&!unscheDemands.equalsIgnoreCase("Y")))
            {
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR15",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&(pkg!=null&&pkg.trim().length()>0))
            {
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR16",null,OAException.ERROR,null);
            } 
            if(javaBindNum==1&&dateRange!=null&&dateRange.trim().length()>0&&!dateRange.equalsIgnoreCase("0"))
            {
               // throw new OAException("Date Range + one aditional parameter is required to perform serach.",OAException.ERROR);
                throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR17",null,OAException.ERROR,null);
            } 
        if(limitParamCount>0&&javaBindNum<=0){
            // throw new OAException("You can not perform limit independently.",OAException.ERROR);
             throw new OAException("XXON","XXON_OM_GBW_BLV_SEARCH_ERR20",null,OAException.ERROR,null);
        }
         if(javaBindNum>0)
         {
         // add order by now with explicit NULL on top based on OPN
            if(includeOrderByClause)
              {
                  viewResultVO.setOrderByClause(" SSD ASC NULLS FIRST ");            
              }else{
                  viewResultVO.setOrderByClause("");
                  viewResultVO.setSortBy("Ssd ASC");
              } 
         viewResultVO.executeQuery();
         log("Query-->"+viewResultVO.getQuery());
         int estdRowCount=setCumulativeQty(respAccess,actionType);
         XXONGbwRecordsDisplayVOImpl RecordsDisplayVO=getXXONGbwRecordsDisplayVO1();
         XXONGbwRecordsDisplayVORowImpl row=(XXONGbwRecordsDisplayVORowImpl)RecordsDisplayVO.first();
         row.setAttribute("recCount",estdRowCount+" Record(s) found.");         
         viewResultVO.setRangeStart(0);         
     }else{
         throw new OAException("XXON","XXON_OM_GBW_SEARCH_ERR",
                                          null,//tokens,
                                          OAException.ERROR,
                                          null);
        }
    } catch(OAException exception)
           {
                throw exception;
            }catch(Exception exception)
            {
                throw new OAException("Error while constructing excecution statement-->"+exception.getMessage(),OAException.ERROR);
            }
}
  public int setCumulativeQty(String respAccess,String actionType)
    {
        log("start of setCumulativeQty-->");
        log("respAccess-->"+respAccess);
        log("actionType-->"+actionType);
        XXONGbwBaklogViewResultVOImpl     ResultVO=getXXONGbwBaklogViewResultVO1();
        com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
                int fetchedRowCount=ResultVO.getRowCount();
                log("fetchedRowCount-->"+fetchedRowCount);
                int estdRowCount=0;
                int cumulativeQuantity=0;
                String demandType=null;
                Date ssd=null;
                Date rsd=null;
                String oldSir=null;
                String oldSsd=null;
                String isPreviouslySelectedRecord=null;
              HashMap  oldRecValues= new HashMap();
        if(fetchedRowCount>0)
                {
                Row ResultVORow=ResultVO.first();
                while (ResultVORow!=null) 
                    {
                        estdRowCount++;
                        demandType=(String)ResultVORow.getAttribute("DemandType");
                        ResultVORow.setAttribute("isRendered",Boolean.FALSE);
                        ssd=(Date)ResultVORow.getAttribute("Ssd");
                        rsd=(Date)ResultVORow.getAttribute("Rsd");
                        log("demandType-->"+demandType);
                        log("respAccess-->"+respAccess);
                        if ("SO".equalsIgnoreCase(demandType))
                        {
                          if("M".equalsIgnoreCase(respAccess))
                          {
                              ResultVORow.setAttribute("isRoCbRender",Boolean.TRUE);
                              ResultVORow.setAttribute("isRoFlagRender",Boolean.FALSE);
                              ResultVORow.setAttribute("isRushOrdFlagReadOnly",Boolean.FALSE);                             
                          }else{
                              ResultVORow.setAttribute("isRoCbRender",Boolean.FALSE);
                              ResultVORow.setAttribute("isRoFlagRender",Boolean.TRUE);
                              ResultVORow.setAttribute("isRushOrdFlagReadOnly",Boolean.TRUE);
                          }
                        }else{
                            ResultVORow.setAttribute("isRoCbRender",Boolean.FALSE);
                            ResultVORow.setAttribute("isRoFlagRender",Boolean.FALSE);
                        
                        }
                        
                        if("M".equalsIgnoreCase(respAccess))
                        {
                            ResultVORow.setAttribute("SadRdRender",Boolean.TRUE);
                            ResultVORow.setAttribute("isScaRender",Boolean.FALSE);
                        }else{
                            ResultVORow.setAttribute("SadRdRender",Boolean.FALSE);
                            ResultVORow.setAttribute("isScaRender",Boolean.TRUE);
                        }                       
                        if(ssd==null)
                        {
                            ResultVORow.setAttribute("CumulativeQuantity",null);
                        }else{
                            Number  cQuantity=(Number)ResultVORow.getAttribute("Quantity");
                            log("cQuantity-->"+cQuantity);
                            cumulativeQuantity=cumulativeQuantity+cQuantity.intValue();
                            log("CumulativeQuantity-->"+cumulativeQuantity);
                            ResultVORow.setAttribute("CumulativeQuantity",String.valueOf(cumulativeQuantity));
                        }
                    // schedule review message new code
                    if(actionType!=null&&actionType.equalsIgnoreCase("scheRev"))
                    {
                           String orderNumber=null;
                           String lineNumber=null;
                           String schedulingReturn=null;
                           Number  lineId=null;
                           
                            orderNumber=(String)ResultVORow.getAttribute("OrderNumber");
                            lineNumber=(String)ResultVORow.getAttribute("LineNumber");
                            schedulingReturn=(String)ResultVORow.getAttribute("SchedulingReturn");                           
                            lineId=(Number)ResultVORow.getAttribute("LineId");
                            
                        oldRecValues=previouslySelectedRecordValues(lineId.toString());
                        oldSir=(String)oldRecValues.get("SIR");
                        oldSsd=(String)oldRecValues.get("SSD");
                        isPreviouslySelectedRecord=(String)oldRecValues.get("PSR");
                        log("isPreviouslySelectedRecord-->"+isPreviouslySelectedRecord);
                        
                if(isPreviouslySelectedRecord!=null&&isPreviouslySelectedRecord.equalsIgnoreCase("Y"))
                    {
                        log("oldSir-->"+oldSir);
                        log("oldSsd-->"+oldSsd);
                        java.util.Date newSsdFormat = null;
                        java.util.Date oldSsdFormat = null;
                        MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber),new MessageToken("LINENUMBER",   lineNumber)};
                        
                        if(ssd!=null&&oldSsd!=null)
                        {
                           try{
                            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");                      
                            newSsdFormat = formatter.parse(ssd.toString());                
                            oldSsdFormat = formatter.parse(oldSsd);
                                log("newSsdFormat-->"+newSsdFormat);
                                log("oldSsdFormat-->"+oldSsdFormat);
                            }catch (Exception exp)
                            {
                                throw new OAException("Error while date conversion::"+exp.getMessage(),OAException.ERROR);
                            }
                        }
                            if((newSsdFormat!=null&&oldSsdFormat!=null&&newSsdFormat.getTime()==oldSsdFormat.getTime())
                            &&(oldSir!=null&&schedulingReturn!=null&&oldSir.equalsIgnoreCase("SC")&&schedulingReturn.equalsIgnoreCase("SC")))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_NO_CHANGE",tokens,OAException.INFORMATION,null));                            
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SC"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SC",tokens,OAException.INFORMATION,null));
                            }else if((oldSir!=null&&schedulingReturn!=null)&&(oldSir.equalsIgnoreCase(schedulingReturn)))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_NULL",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("MC"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_MC",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SG"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SG",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SA"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SA",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn==null)
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_NULL",tokens,OAException.INFORMATION,null));
                            }
                        
                     }
                    } else if(actionType!=null&&actionType.equalsIgnoreCase("rsdEqSsd"))
                    {
                        String schedulingReturn=null;
                        String orderNumber=null;
                        String lineNumber=null;
                        Number  lineId=null;   
                        
                        lineId=(Number)ResultVORow.getAttribute("LineId");
                        orderNumber=(String)ResultVORow.getAttribute("OrderNumber");
                        lineNumber=(String)ResultVORow.getAttribute("LineNumber");
                        schedulingReturn=(String)ResultVORow.getAttribute("SchedulingReturn");
                        
                        oldRecValues=previouslySelectedRecordValues(lineId.toString());
                        oldSir=(String)oldRecValues.get("SIR");
                        oldSsd=(String)oldRecValues.get("SSD");
                        isPreviouslySelectedRecord=(String)oldRecValues.get("PSR");
                        log("isPreviouslySelectedRecord-->"+isPreviouslySelectedRecord);
                        
                    if(isPreviouslySelectedRecord!=null&&isPreviouslySelectedRecord.equalsIgnoreCase("Y"))
                    {
                        
                        MessageToken[] tokens={new MessageToken("ORDERNUMBER", orderNumber),new MessageToken("LINENUMBER",   lineNumber)};
                          if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SC"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SC",tokens,OAException.INFORMATION,null));
                            } else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("MC"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_MC",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SG"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SG",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn!=null&&schedulingReturn.equalsIgnoreCase("SA"))
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_SA",tokens,OAException.INFORMATION,null));
                            }else if(schedulingReturn==null)
                            {
                              exceptions.add(new OAException("XXON","XXON_OM_GBW_SIR_STATUS_NULL",tokens,OAException.INFORMATION,null));
                            }
                    }
                  
                    }
                        ResultVORow=ResultVO.next();
                    }//End loop.
                    
                OAException.raiseBundledOAException(exceptions);                  
               }
                    return estdRowCount;
    }
    public HashMap previouslySelectedRecordValues(String newLineId)
    {
        log("start of isPriorSelectedRecord...");
        log("newLineId-->"+newLineId);
        String sir=null;
        String ssd=null;
        HashMap  oldValues= new HashMap();
        Boolean  oldRecord=Boolean.FALSE;
       if(oldSsdRecord!=null && oldSsdRecord.size()>0)
        {
       
           Iterator it = oldSsdRecord.entrySet().iterator();
              while (it.hasNext())
              {
                   Map.Entry pair = (Map.Entry)it.next();;
                 if( ((String)pair.getKey()).equalsIgnoreCase(newLineId))
                 {
                     ssd=(String)pair.getValue(); 
                     log("ssd-->"+ssd);
                     oldRecord=Boolean.TRUE;
                 }

              } // end loop
           }
               if(oldSirRecord!=null && oldSirRecord.size()>0)
                {
               
                   Iterator it = oldSirRecord.entrySet().iterator();
                      while (it.hasNext())
                      {
                           Map.Entry pair = (Map.Entry)it.next();;
                         if( ((String)pair.getKey()).equalsIgnoreCase(newLineId))
                         {
                             sir=(String)pair.getValue(); 
                             log("sir-->"+sir);
                             oldRecord=Boolean.TRUE;
                         }

                      } // end loop
                   }
             if(oldRecord)
             {
                 oldValues.put("SSD",ssd);
                 oldValues.put("SIR",sir);
                 oldValues.put("PSR","Y");
             }else{
                 oldValues.put("SSD",ssd);
                 oldValues.put("SIR",sir);
                 oldValues.put("PSR","N");
             }
       
         return oldValues;      
    }
  
// public void updateRecords()
// {
// 
//     validateRecords();
//     passDataToObject();
// 
// }
 public String validateRecords()
 {
 log("start of validateRecords method");
     XXONGbwBaklogViewResultVOImpl resultVO=getXXONGbwBaklogViewResultVO1();
        if(resultVO.getFetchedRowCount()<=0)
            {
                String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
                throw new OAException(s1,OAException.ERROR);
            }
     XXONGbwBaklogViewResultVORowImpl selectedRows=null;
     Row[] rows = resultVO.getFilteredRows("select", "Y");
     XXONGbwUtil utils= new XXONGbwUtil();
     Date  sysdate=utils.getDafaultOafDate(getOADBTransaction());
       if(rows.length<=0)
       {
       // throw new OAException("Please select the records to update.",OAException.ERROR);
           throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",
                                            null,//tokens,
                                            OAException.ERROR,
                                            null);
       
       }
       String rushOrderFlag     =null;
       String rushOrderFlagDb   =null;
       String OrderNumber       =null;
       String demandType        =null;
       String orderHold         =null;
       String reschuleReason    =null;
       String lineNumber        =null; 
       String cust5Code         =null;
       StringBuffer   stPrdMessList= new StringBuffer();
    com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
     for (int i = 0; i < rows.length; i++)
     {
        selectedRows = (XXONGbwBaklogViewResultVORowImpl)rows[i];
        
        OrderNumber=selectedRows.getOrderNumber();
        lineNumber=selectedRows.getLineNumber();
        Date ssd=selectedRows.getSsd();
        Date ssdDb=selectedRows.getSsdDb();
        Date rsd=selectedRows.getRsd();
        rushOrderFlag=selectedRows.getRushOrderFlag();
        rushOrderFlagDb=selectedRows.getRushOrderFlagDb();
        demandType=selectedRows.getDemandType();
        orderHold=selectedRows.getOrderHold();
        reschuleReason=selectedRows.getRescheduleReason();
           cust5Code=selectedRows.getCust5Code();
           log("OrderNumber-->"+OrderNumber);
           log("lineNumber-->"+lineNumber);
           log("ssd-->"+ssd);
           log("ssdDb-->"+ssdDb);
           log("rsd-->"+rsd);
           log("rushOrderFlag-->"+rushOrderFlag);
           log("rushOrderFlagDb-->"+rushOrderFlagDb);
           log("demandType-->"+demandType);
           log("orderHold-->"+orderHold);
           log("reschuleReason-->"+reschuleReason);
           log("cust5Code-->"+cust5Code);
           MessageToken[] tokens={new MessageToken("ORDERNUMBER", OrderNumber),
                                 new MessageToken("LINENUMBER",   lineNumber)};
      if(demandType!=null&&demandType.equals("FR"))// validation for forecast
      {
          if(ssd==null)
            {
             exceptions.add(new OAException("XXON","XXON_OM_GBW_SSD_NULL_ERR",tokens,OAException.ERROR,null));
             }
          if(ssd!=null&&ssdDb!=null&&ssd.equals(ssdDb))
          {
              exceptions.add( new OAException("XXON","XXON_OM_GBW_NO_CHANGES_ERR",
                                               tokens,//tokens,
                                               OAException.ERROR,
                                               null));
          }
              if(ssd!=null)
               {
                    long ssdLong = ssd.dateValue().getTime();
                    // sysdate validation
                    if(ssdLong<(sysdate.dateValue().getTime()))
                    {
                    exceptions.add( new OAException("XXON","XXON_OM_GBW_SSD_ERR",tokens,OAException.ERROR,null));                      
                    }
                // SSD<RSD validation 
                if(rsd!=null)
                {
                    if(ssdLong<(rsd.dateValue().getTime()))
                    {
                    exceptions.add( new OAException("XXON","XXON_OM_GBW_SSD_EARLIER_RSD_ER",
                                                    tokens,//tokens,
                                                    OAException.ERROR,
                                                    null));
                    }
                }
              }
      }else{
      // no changes made error
         if((ssd==null&&rushOrderFlag.equalsIgnoreCase(rushOrderFlagDb))
             ||(ssd!=null&&ssdDb!=null&&ssd.equals(ssdDb)&&rushOrderFlag.equalsIgnoreCase(rushOrderFlagDb)))
         {
            exceptions.add( new OAException("XXON","XXON_OM_GBW_NO_CHANGES_ERR",
                                              tokens,//tokens,
                                              OAException.ERROR,
                                              null));
         }
         // only rushOrderFlag change
         if((ssd==null&&ssdDb==null&&!rushOrderFlag.equalsIgnoreCase(rushOrderFlagDb))
            ||(ssd!=null&&ssdDb!=null&&ssd.equals(ssdDb)&&!rushOrderFlag.equalsIgnoreCase(rushOrderFlagDb)))
         {
             // any change not allowed if order on hold
             if(orderHold!=null&&orderHold.equals("Y")) 
               {
                  Number relgFlagCount=getRelgFlagCount(selectedRows.getLineId());
                  if(relgFlagCount!=null&&relgFlagCount.intValue()>0)
                  {
                     exceptions.add( new OAException("XXON","XXON_OM_GBW_ORDER_HOLD_ERR",
                                                      tokens,//tokens,
                                                      OAException.ERROR,
                                                      null));
                  }
               }
         }else{
             // any change not allowed if order on hold
             if(orderHold!=null&&orderHold.equals("Y"))
             {
                Number relgFlagCount=getRelgFlagCount(selectedRows.getLineId());
                if(relgFlagCount!=null&&relgFlagCount.intValue()>0)
                {
                   exceptions.add( new OAException("XXON","XXON_OM_GBW_ORDER_HOLD_ERR",
                                                    tokens,//tokens,
                                                    OAException.ERROR,
                                                    null));
                }
              }
       // SSD always should be not null
                if(ssd==null)
                {
                  exceptions.add( new OAException("XXON","XXON_OM_GBW_SSD_NULL_ERR",tokens,OAException.ERROR,null));
                }
                // SSD reschedule then reason should be not null
                if(ssdDb!=null&&reschuleReason==null)
                {
                  exceptions.add( new OAException("XXON","XXON_OM_GBW_RESCHU_REASON_ERR",
                                                           tokens,//tokens,
                                                           OAException.ERROR,
                                                           null));
                }   
             // reschedule reason validation    
             if(reschuleReason!=null&&reschuleReason.trim().length()>0)
             {
                 String isValidReason=null;
                 isValidReason=isValidReason(reschuleReason);
                 log("isValidReason-->"+isValidReason);
                     if(isValidReason!=null&&isValidReason.trim().length()>0&&isValidReason.equalsIgnoreCase("N"))
                     {
                         exceptions.add( new OAException("XXON","XXON_OM_GBW_RESCH_REASON_ERR",
                                                            tokens,
                                                            OAException.ERROR,
                                                            null));
                     }
             }
          if(ssd!=null)
           {
              long ssdLong = ssd.dateValue().getTime();
              // sysdate validation
              if(ssdLong<(sysdate.dateValue().getTime()))
              {
                  exceptions.add( new OAException("XXON","XXON_OM_GBW_SSD_ERR",
                                                     tokens,//tokens,
                                                     OAException.ERROR,
                                                     null));
              }
              //SSD<RSD date validation
              if(rsd!=null)
              {
                  if(ssdLong<(rsd.dateValue().getTime()))
                  {
                      exceptions.add( new OAException("XXON","XXON_OM_GBW_SSD_EARLIER_RSD_ER",
                                                        tokens,//tokens,
                                                        OAException.ERROR,
                                                        null));
                  }
              }
          }
          
           String isinsideDownPrd=null;
            isinsideDownPrd=isInsideShtDwnPrd(ssd,cust5Code);
            if(isinsideDownPrd!=null&&isinsideDownPrd.trim().length()>0&&isinsideDownPrd.equalsIgnoreCase("Y"))
            {
                String s1=" (order#"+OrderNumber+" line#"+lineNumber+")";
                String s2=", (order#"+OrderNumber+" line#"+lineNumber+")";
                if(stPrdMessList.length()>0)
                {
                    stPrdMessList.append(s2);
                }else{
                   stPrdMessList.append(s1);
                }
            }
           
          
         }
     }
       } // end for loop
        OAException.raiseBundledOAException(exceptions);
        String returnMsg=null;
        if(stPrdMessList.length()>0)
        {
            String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_CUST_SHUTDOWN_ERR",null);
            returnMsg=s1+stPrdMessList.toString();
        }
        
        return returnMsg;
    }
  public String uuidValue () 
    {
        // Creating a random UUID (Universally unique identifier).
        UUID uuid = UUID.randomUUID();
        String randomUUIDString = uuid.toString();
        log("Random UUID String = " + randomUUIDString);
        log("UUID version       = " + uuid.version());
        log("UUID variant       = " + uuid.variant());
        return randomUUIDString;
    }
  public void scheRev()
    {
       log("inside scheRev ");
        oldSsdRecord = new HashMap();
        oldSirRecord = new HashMap();
        XXONGbwBaklogViewResultVOImpl resultVO=getXXONGbwBaklogViewResultVO1();
        if(resultVO.getFetchedRowCount()<=0)
        {
            String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
            throw new OAException(s1,OAException.ERROR);
        }
        XXONGbwBaklogViewResultVORowImpl selectedRows=null;
        Row[] rows = resultVO.getFilteredRows("select", "Y");   
        if(rows.length<=0)
        {
           throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",
                                             null,//tokens,
                                             OAException.ERROR,
                                             null);
        
        }
        
        String eventData=null;
        String eventKey=null;
        String eventName = "oracle.apps.xxon.om.ScheduleSynchEvent";
        String s1=null;
        String s2=null;
        String lineId=null;
        String s3=null;
        String demandType=null;
        XXONGbwUtil utils= new XXONGbwUtil();
        HashMap eventParams = null;
        String orderNumber = null;
        String lineNumber = null;
        Date   ssd=null;
        String sir=null;
       for (int i = 0; i < rows.length; i++)
        {
          selectedRows = (XXONGbwBaklogViewResultVORowImpl)rows[i];
          
            orderNumber = selectedRows.getOrderNumber();
            demandType=selectedRows.getDemandType();
            lineNumber = selectedRows.getLineNumber();
            ssd=selectedRows.getSsd();
            sir=selectedRows.getSchedulingReturn();
            if(lineNumber!=null){
                lineNumber = lineNumber.replace(".","_");
            }            
          eventKey=orderNumber+"_"+lineNumber+"_"+uuidValue();
          lineId=selectedRows.getLineId().toString();
          if(selectedRows.getSsd()!=null)
          {
            s1="CHANGE";
            s2="REVIEW";
          }else{
            s1="ADD";
            s2="";
          }
          if(demandType!=null&&demandType.trim().length()>0&&demandType.equalsIgnoreCase("SO"))
          {
              s3="ORDER_LINE";
          }else if(demandType!=null&&demandType.trim().length()>0&&demandType.equalsIgnoreCase("FR"))
          {
              s3="FORECAST_RESVTN";
          }else{
             s3="";
          }
          
            eventParams = new HashMap(5);            
            eventParams.put("XXON_OM_SCH_SOURCE_TYPE",s3);
            eventParams.put("XXON_OM_SCH_REQ_TYPE",s1);
            eventParams.put("XXON_OM_SCH_CHANGE_TYPE",s2);
            eventParams.put("XXON_OM_SCH_LINE_ID",lineId);   
            
            if(ssd!=null)
            {
               oldSsdRecord.put(lineId,ssd.toString());
            }else{
                oldSsdRecord.put(lineId,null);
            }
            oldSirRecord.put(lineId,sir);
            
          log("eventName-->"+eventName);
          log("eventKey-->"+eventKey);        
         utils.callBusinessEvent(getOADBTransaction(),eventName,eventKey,eventData,eventParams);
        } // end loop
           
     
    }
 
    public void rsdEqSsd()
      {
         log("inside rsdEqSsd");
          oldSsdRecord = new HashMap();
          oldSirRecord = new HashMap();
          XXONGbwBaklogViewResultVOImpl resultVO=getXXONGbwBaklogViewResultVO1();
          if(resultVO.getFetchedRowCount()<=0)
          {
              String s1=getOADBTransaction().getMessage("XXON","XXON_OM_GBW_NO_SEARCH",null);
              throw new OAException(s1,OAException.ERROR);
          }
          XXONGbwBaklogViewResultVORowImpl selectedRows=null;
          Row[] rows = resultVO.getFilteredRows("select", "Y");            
          if(rows.length<=0)
          {
             throw new OAException("XXON","XXON_OM_GBW_RECORD_SELECT_ERR",
                                               null,//tokens,
                                               OAException.ERROR,
                                               null);
          
          }
          XXONGbwUtil utils= new XXONGbwUtil();
          com.sun.java.util.collections.ArrayList exceptions = new com.sun.java.util.collections.ArrayList();
          String orderNum = null;
          String lineNum = null;
          Date   ssd=null;
          String sir=null;
          for (int i = 0; i < rows.length; i++)
           {
                selectedRows = (XXONGbwBaklogViewResultVORowImpl)rows[i];
                Date rsd=selectedRows.getRsd();
               orderNum = selectedRows.getOrderNumber();
               lineNum=selectedRows.getLineNumber();
               ssd=selectedRows.getSsd();
               sir=selectedRows.getSchedulingReturn();
                long rsdLong = rsd.dateValue().getTime();
                Date  sysdate=utils.getDafaultOafDate(getOADBTransaction());
                if(rsdLong<(sysdate.dateValue().getTime()))
                {
                
                 exceptions.add( new OAException("Delinquent RSD at order#"+orderNum+" and line#"+lineNum,OAException.ERROR));
                //throw new OAException ("Invalid SSD entered, cannot be delinquent.",OAException.ERROR);
                }
           }
        OAException.raiseBundledOAException(exceptions);
        
          String eventData=null;
          String eventKey=null;
          String eventName = "oracle.apps.xxon.om.ScheduleSynchEvent";
          String s1="CHANGE";
          String s2="DEFAULT";
          String lineId=null;
          String s3=null;
          String demandType=null;         
          
          HashMap eventParams = null;
          String orderNumber = null;
          String lineNumber = null;
         for (int i = 0; i < rows.length; i++)
          {
            selectedRows = (XXONGbwBaklogViewResultVORowImpl)rows[i];
            
              orderNumber = selectedRows.getOrderNumber();
              demandType=selectedRows.getDemandType();
              lineNumber = selectedRows.getLineNumber();            
              if(lineNumber!=null){
                  lineNumber = lineNumber.replace(".","_");
              }            
            eventKey=orderNumber+"_"+lineNumber+"_"+uuidValue();
            lineId=selectedRows.getLineId().toString();
           
            if(demandType!=null&&demandType.trim().length()>0&&demandType.equalsIgnoreCase("SO"))
            {
                s3="ORDER_LINE";
            }else if(demandType!=null&&demandType.trim().length()>0&&demandType.equalsIgnoreCase("FR"))
            {
                s3="FORECAST_RESVTN";
            }else{
               s3="";
            }
            
              eventParams = new HashMap(5);
              
              eventParams.put("XXON_OM_SCH_SOURCE_TYPE",s3);
              eventParams.put("XXON_OM_SCH_REQ_TYPE",s1);
              eventParams.put("XXON_OM_SCH_CHANGE_TYPE",s2);
              eventParams.put("XXON_OM_SCH_LINE_ID",lineId);  
              
            log("eventName-->"+eventName);
            log("eventKey-->"+eventKey);
            
              if(ssd!=null)
              {
                 oldSsdRecord.put(lineId,ssd.toString());
              }else{
                  oldSsdRecord.put(lineId,null);
              }
              oldSirRecord.put(lineId,sir);
          
           utils.callBusinessEvent(getOADBTransaction(),eventName,eventKey,eventData,eventParams);
          }
       
      }
   public void passDataToObject() {
             log("Start of passDataToObject");
          XXONGbwBaklogViewResultVOImpl resultVO=getXXONGbwBaklogViewResultVO1();
              XXONGbwBaklogViewResultVORowImpl selectedRows=null;
              log("ResultVO count-->"+resultVO.getFetchedRowCount());
                  XXONGbwUtil utils= new XXONGbwUtil();
                  String accessLevel=null;
                  accessLevel=utils.respAccessLevel(getOADBTransaction());
                  int userId=getOADBTransaction().getUserId();
                  Number UserId= new Number(userId);
                  int loginId=getOADBTransaction().getLoginId();
                  Number LoginId= new Number(loginId);
              XXONGbwRescheFrObj            gbwRescheFrObj             = null;
              XXONGbwRescheFrObj[]          gbwRescheFrArray           = null;
              XXONGbwRescheFrTab            gbwRescheFrTab             = null;
              ArrayList<XXONGbwRescheFrObj> gbwRescheFrObjArrayList    = null;
                  String changeReasonCode=null;
                  String demandType=null;
                  String rushOrderFlag=null;
                  String rushOrderFlagDb=null;
                  String orderNumber=null;
                  String rescheduleReason=null;
              try{
                  
                  Row[] rows = resultVO.getFilteredRows("select", "Y");
                for (int i = 0; i < rows.length; i++)
                  {
                   
                    selectedRows = (XXONGbwBaklogViewResultVORowImpl)rows[i];
                    
                    Number headerId=selectedRows.getHeaderId();
                    Number lineId=selectedRows.getLineId();
                    Number reservtnId=selectedRows.getReservtnId();
                    orderNumber=selectedRows.getOrderNumber();
                    rushOrderFlag=selectedRows.getRushOrderFlag();
                    rushOrderFlagDb=selectedRows.getRushOrderFlagDb();
                    Date rsd=selectedRows.getRsd();                                      
                    Date ssd=selectedRows.getSsd();
                    Date ssdDb=selectedRows.getSsdDb();    
                    changeReasonCode=selectedRows.getreasonCode();
                    rescheduleReason=selectedRows.getRescheduleReason();
                    if(changeReasonCode==null&&rescheduleReason!=null)
                    {
                        changeReasonCode=getReasonCode(rescheduleReason);
                    }
                    demandType=selectedRows.getDemandType();
                    Number quantity=selectedRows.getQuantity();                    
                      log("rsd..." + rsd);
                      log("ssd..." + ssd);
                      log("ssdDb..." + ssdDb);
                      log("Quantity..." + quantity);
                      log("rushOrderFlag..." + rushOrderFlag);
                      log("rushOrderFlagDb..." + rushOrderFlagDb);
                      log("orderNumber..." + orderNumber);
                      log("demandType..." + demandType);
                      log("lineId..." + lineId);
                      log("reservtnId..." + reservtnId);
                      log("headerId..." + headerId);
                      log("changeReasonCode..." + changeReasonCode);
                    if(ssd!=null&&ssdDb!=null&&ssd.equals(ssdDb))
                    {
                        ssd=null;
                    }
                      
                      gbwRescheFrObj= new XXONGbwRescheFrObj(getBigDecimal(headerId),getBigDecimal(lineId),getBigDecimal(reservtnId),orderNumber,
                                                             getSqlTimeStamp(rsd),getSqlTimeStamp(ssd),changeReasonCode,demandType,null,getBigDecimal(quantity),
                                                             null,null,getBigDecimal(UserId),getBigDecimal(LoginId),accessLevel,rushOrderFlag);
                      if(gbwRescheFrObjArrayList == null) gbwRescheFrObjArrayList = new ArrayList<XXONGbwRescheFrObj>();
                      gbwRescheFrObjArrayList.add(gbwRescheFrObj);
                  }
                  if(gbwRescheFrObjArrayList != null && gbwRescheFrObjArrayList.size() > 0)
                          {
                              log("GbwRescheFrObjArrayList size-->"+gbwRescheFrObjArrayList.size());            
                             gbwRescheFrArray = gbwRescheFrObjArrayList.toArray(new XXONGbwRescheFrObj[gbwRescheFrObjArrayList.size()]);
                          }
                        gbwRescheFrTab = new XXONGbwRescheFrTab(gbwRescheFrArray);
                         callAPI(gbwRescheFrTab,accessLevel);
              }catch(OAException exception)
                   {
                       throw exception;
                   }catch(Exception exception){
                       throw new OAException("Error while constructing the XXONGbwRescheFrTab Object.Error -->"+exception.getMessage(),OAException.ERROR);
                   } 
              }
    public String getReasonCode(String reason)
    {
    log("Start of getReasonCode");
        log("reason-->"+reason);
     String reasonCode=null;
        ViewObject dynamicVO = findViewObject("XXONGbwGetReasonCodeVO");
        String querySql=null;
        if(dynamicVO==null)
        {
            querySql = "SELECT   reason_code\n" + 
                        "  FROM   xxon_om_gbw_resch_reason_lov_v\n" + 
                        " WHERE   meaning = :1";  
            dynamicVO = createViewObjectFromQueryStmt("XXONGbwGetReasonCodeVO",querySql);
            log("querySql-->"+querySql);
        }
        if(dynamicVO != null)   
                   {  
                        dynamicVO.setWhereClause(null);  
                        dynamicVO.setWhereClauseParams(null);
                        dynamicVO.setWhereClauseParam(0,reason);
                        dynamicVO.executeQuery(); 
                       log("dynamicVO Query-->"+dynamicVO.getQuery());
                       Row dynamicVORow = dynamicVO.first(); 
                        if(dynamicVORow != null)
                        {  
                          log("reason_code:" + dynamicVORow.getAttribute(0));  
                          reasonCode=(String)dynamicVORow.getAttribute(0);
                       }  
                   } 
      return reasonCode;
    }
     public void callAPI(XXONGbwRescheFrTab gbwRescheFrTab,String accessLevel)
        {
               log("Start of callTpmPropertyAPI");
                            
                    String status = null;
                    Connection connection = null;
                    OracleCallableStatement statement = null;                
                    int userId=getOADBTransaction().getUserId();
                    int respId=getOADBTransaction().getResponsibilityId();
                    int applId=getOADBTransaction().getResponsibilityApplicationId();
                    int orgId=getOADBTransaction().getOrgId();
                   ARRAY  errorARRAY                                = null;
                   String[] errorRecordArray                        = null;
               com.sun.java.util.collections.ArrayList exceptionsList = new com.sun.java.util.collections.ArrayList();
                   log("orgId-->"+orgId);
                   log("userId-->"+userId);
                   log("respId-->"+respId);
                   log("applId-->"+applId);
                    
              
            try { 
                        connection = getOADBTransaction().getJdbcConnection();
                        statement = (OracleCallableStatement)connection.prepareCall("BEGIN APPS.xxon_om_gbw_utils_pkg.gbw_update_sol_fr(:1,:2,:3,:4,:5,:6,:7,:8); END;");
                        statement.setObject(1, gbwRescheFrTab, OracleTypes.ARRAY);
                        statement.setNUMBER(2,new NUMBER(orgId));
                        statement.setNUMBER(3,new NUMBER(userId));
                        statement.setNUMBER(4,new NUMBER(respId));
                        statement.setNUMBER(5,new NUMBER(applId));
                        statement.setString(6,accessLevel);
                        statement.registerOutParameter(7, OracleTypes.VARCHAR);
                        statement.registerOutParameter(8,OracleTypes.ARRAY,"XXON_OM_GBW_ERROR_MSG_TAB");                                         
                        statement.execute();
                        status = statement.getString(7);  
                        log("Status form Pl/Sql Programs is -----> "+status);                       
                       if (status!=null&&status.trim().length()>0&&status.equalsIgnoreCase("E"))
                        {   
                            
                             errorARRAY = statement.getARRAY(8);
                             errorRecordArray = (String[])errorARRAY.getArray();
                             if(errorRecordArray.length > 0)
                             {
                                for(int index=0;index<errorRecordArray.length;index++)
                                {
                                    //exceptionsList.add(errorRecordArray[index]);
                                    log("errorMessages-----> "+errorRecordArray[index]);
                                   // errorMessages.append(errorRecordArray[index]);
                                    exceptionsList.add( new OAException(errorRecordArray[index],OAException.ERROR));
                                }
                             }
                             OAException.raiseBundledOAException(exceptionsList);
                            
                        }                        
                       statement.close();
                    }catch(OAException exception){
                        throw exception;
                    } catch (Exception exception)
                    {
                            log("exception Status form Pl/Sql Programs is -----> "+status);
                            exception.printStackTrace();
                            throw new OAException(exception.getMessage(),OAException.ERROR);
                    }
                    
                    if(status!=null&&status.equalsIgnoreCase("S"))
                    {
                        getOADBTransaction().commit();
                    }
                    else{
                        getOADBTransaction().rollback();
                    }
               log("End of callAPI");
           } // end of call api
public String getRespKey()
{
    int respId=getOADBTransaction().getResponsibilityId();    
    log("RespId-->"+respId);
    XXONGbwGetRespKeyVOImpl respKeyVO=getXXONGbwGetRespKeyVO1();
    respKeyVO.setWhereClauseParams(null);
    respKeyVO.setWhereClauseParam(0,respId);
    XXONGbwGetRespKeyVORowImpl row=(XXONGbwGetRespKeyVORowImpl)respKeyVO.first();
  respKey=row.getResponsibilityKey();
    log("RespKey-->"+respKey);
    return respKey;

}
/**
     * @param corpCode
     */
    public void exeCust5CodeLOV(String corpCode)
{
  log("exeCust5CodeLOV :: corpCode-->"+corpCode);    
    String query=" SELECT   LOCATION CUST5_CODE,\n" + 
    "           HCA.ACCOUNT_NUMBER CORP_CODE\n" + 
    "     FROM   APPS.HZ_CUST_ACCOUNTS HCA,\n" + 
    "            APPS.HZ_CUST_ACCT_SITES_ALL HCASA,\n" + 
    "            APPS.HZ_CUST_SITE_USES_ALL HCSUA\n" + 
    "    WHERE       HCA.CUST_ACCOUNT_ID = HCASA.CUST_ACCOUNT_ID\n" + 
    "            AND HCASA.CUST_ACCT_SITE_ID = HCSUA.CUST_ACCT_SITE_ID\n" + 
    "            AND HCSUA.STATUS = 'A'\n" + 
    "            AND HCASA.STATUS = 'A'\n" + 
    "            AND HCA.STATUS = 'A'\n" + 
    "            AND HCA.ACCOUNT_NUMBER='"+corpCode+"'"+
    "        GROUP BY LOCATION,HCA.ACCOUNT_NUMBER";
    
    XXONGbwCust5CodeLovVOImpl cust5CodeLovVO=getXXONGbwCust5CodeLovVO1();
      cust5CodeLovVO.setFullSqlMode(cust5CodeLovVO.FULLSQL_MODE_AUGMENTATION);
      cust5CodeLovVO.setQuery(query);
      cust5CodeLovVO.setWhereClauseParams(null);
      cust5CodeLovVO.executeQuery();
}
    public void exeCust5CodeLOV()
    {
          
          String query=" SELECT   LOCATION CUST5_CODE,\n" + 
          "           HCA.ACCOUNT_NUMBER CORP_CODE\n" + 
          "     FROM   APPS.HZ_CUST_ACCOUNTS HCA,\n" + 
          "            APPS.HZ_CUST_ACCT_SITES_ALL HCASA,\n" + 
          "            APPS.HZ_CUST_SITE_USES_ALL HCSUA\n" + 
          "    WHERE       HCA.CUST_ACCOUNT_ID = HCASA.CUST_ACCOUNT_ID\n" + 
          "            AND HCASA.CUST_ACCT_SITE_ID = HCSUA.CUST_ACCT_SITE_ID\n" + 
          "            AND HCSUA.STATUS = 'A'\n" + 
          "            AND HCASA.STATUS = 'A'\n" + 
          "            AND HCA.STATUS = 'A'\n" + 
          "        GROUP BY LOCATION,HCA.ACCOUNT_NUMBER";
          
          XXONGbwCust5CodeLovVOImpl cust5CodeLovVO=getXXONGbwCust5CodeLovVO1();
            cust5CodeLovVO.setFullSqlMode(cust5CodeLovVO.FULLSQL_MODE_AUGMENTATION);
            cust5CodeLovVO.setQuery(query);
            cust5CodeLovVO.setWhereClauseParams(null);
            cust5CodeLovVO.executeQuery();
    }
    public Number getRelgFlagCount( Number lineId)
    {
        XXONGbwGetRlagFalgCountVOImpl rlagFalgCountVO=getXXONGbwGetRlagFalgCountVO1();
        rlagFalgCountVO.setWhereClauseParams(null);
        rlagFalgCountVO.setWhereClauseParam(0,lineId);
        rlagFalgCountVO.executeQuery();
        XXONGbwGetRlagFalgCountVORowImpl row=(XXONGbwGetRlagFalgCountVORowImpl)rlagFalgCountVO.first();
        Number  relgFlagCount=row.getReleasedFlagCount();
        return relgFlagCount;
    }
    public String isInsideShtDwnPrd(Date ssd,String cust5Code) 
          {
            log("Start of isInsideShtDwnPrd -->");
            String insideShtDwnPrd="N";
            try
              {
                log("ssd-->"+ssd);
                log("cust5Code-->"+cust5Code);
                java.sql.Date  funDate=null;
                PreparedStatement preparedstatement = null;
                ResultSet resultset = null;
                Connection conn = getOADBTransaction().getJdbcConnection();             
                String query_String="SELECT xxon_om_gbw_commons_pkg.get_revised_ssd(:1,:2) FROM DUAL";
                preparedstatement = conn.prepareStatement(query_String);
                preparedstatement.setDate(1, ssd.dateValue());
                preparedstatement.setString(2, cust5Code);
                resultset = preparedstatement.executeQuery();
                if(resultset.next())
                    {
                         funDate =resultset.getDate(1);
                         resultset.close();
                         preparedstatement.close(); 
                    }
             log("funDate-->"+funDate);
             log("ssd-->"+ssd);
          oracle.jbo.domain.Date adjustedSsd = new oracle.jbo.domain.Date(funDate);
           if(ssd!=null&&adjustedSsd!=null)
            {
                long ssdLong         = ssd.dateValue().getTime();
                long adjustedSsdLong = adjustedSsd.dateValue().getTime();
                if((ssdLong<adjustedSsdLong)||(ssdLong>adjustedSsdLong))
                {
                    insideShtDwnPrd="Y";
                }else{
                    insideShtDwnPrd="N";
                }
            }
                //            if(ssd.equals(adjustedSsd))
                //            {
                //                insideShtDwnPrd="N";
                //            }else{
                //                insideShtDwnPrd="Y";
                //            }
                
              }
              catch(Exception e) 
              {
                  e.printStackTrace();
                  throw new OAException("Preparedstatement Error-->"+e.getMessage(),OAException.ERROR);
              }

              return insideShtDwnPrd;
          }  
 public String getDateRangeIndex(String dateRange)
 {
    log("start of getDateRangeIndex");
     log("dateRange-->"+dateRange);
     int rowIndex=0;
     String dateRangeFromVo=null;
     if(dateRange!=null&&dateRange.trim().length()>0)
     {
         XXONGbwDateRangeVOImpl DateRangeVO=getXXONGbwDateRangeVO1();
         Row   row=DateRangeVO.first();
         while(row!=null)
         {
             rowIndex++;
             log("rowIndex-->"+rowIndex);
             dateRangeFromVo   =(String)row.getAttribute("LookupCode");
             log("dateRangeFromVo-->"+dateRangeFromVo);
          if(dateRangeFromVo!=null&&dateRange!=null&&(dateRangeFromVo.equalsIgnoreCase(dateRange)))
          {
            break;
          }
             row=DateRangeVO.next();
         }
     }
  return String.valueOf(rowIndex);
 }
 public String isValidReason(String reason)
    {
        log("Start of isValidReason");
        log("reason-->"+reason);
        oracle.jbo.domain.Number reasonCount=null;
        ViewObject reasonCodeVO = findViewObject("XXONGbwRsnCodeValdVO");
        String querySql=null;
        String validReason=null;
        if(reasonCodeVO==null)
        {
            querySql = "SELECT   COUNT(reason_code) reason_count\n" + 
                        " FROM   xxon_om_gbw_resch_reason_lov_v\n" + 
                        "   WHERE meaning=:1";  
            reasonCodeVO = createViewObjectFromQueryStmt("XXONGbwRsnCodeValdVO",querySql);
            log("querySql-->"+querySql);
        }
        if(reasonCodeVO != null)   
                   {  
                        reasonCodeVO.setWhereClause(null);  
                        reasonCodeVO.setWhereClauseParams(null);
                        reasonCodeVO.setWhereClauseParam(0,reason);
                        reasonCodeVO.executeQuery();  
                       log("reasonCodeVO Query-->"+reasonCodeVO.getQuery());
                       Row dynamicVORow = reasonCodeVO.first(); 
                        if(dynamicVORow != null)
                        {   
                          reasonCount=(oracle.jbo.domain.Number)dynamicVORow.getAttribute(0);
                          log("reasonCount-->"+reasonCount);
                       }  
                   } 
        if(reasonCount!=null&&reasonCount.intValue()>0)
        {
            validReason="Y";
        }else{
            validReason="N";
        }
      return validReason;
    }
    /**
     * get Decimal value
     */
    public static BigDecimal getBigDecimal(Number value) {
        BigDecimal decimalValue = null;
        if(value != null){
            decimalValue = new BigDecimal(value.toString());
        }
        return decimalValue; 
    } 
    /**
     * getSqlTimeStamp
     */
     public static Timestamp getSqlTimeStamp(oracle.jbo.domain.Date oafDate){
        Timestamp timeStampValue = null;
        if(oafDate != null){
            try{
              //timeStampValue = new Timestamp((oafDate.dateValue()).getTime());
               timeStampValue = oafDate.timestampValue();
             System.out.println("Time stamp Value ---->"+timeStampValue.toString());
            }catch(Exception exc){
                System.out.println("Error while parsing dates."+exc.getMessage());
            }
        }
        return timeStampValue;
     }
     
    /**
     * Below Method is to print the log messages
     *@param Message for text 
    */
    private void log(String Message)
    {
        XXONGbwUtil utils= new XXONGbwUtil();
        OADBTransaction oadb=getOADBTransaction();
        utils.log(Message,oadb);
    }
    /**Container's getter for XXONGbwRecordsDisplayVO1
     */
    public XXONGbwRecordsDisplayVOImpl getXXONGbwRecordsDisplayVO1() {
        return (XXONGbwRecordsDisplayVOImpl)findViewObject("XXONGbwRecordsDisplayVO1");
    }

    /**Container's getter for XXONGbwSearchCriteriaValuesVO1
     */
    public XXONGbwSearchCriteriaValuesVOImpl getXXONGbwSearchCriteriaValuesVO1() {
        return (XXONGbwSearchCriteriaValuesVOImpl)findViewObject("XXONGbwSearchCriteriaValuesVO1");
    }

    /**Container's getter for XXONGbwOperatingUnitLovVO1
     */
    public XXONGbwOperatingUnitLovVOImpl getXXONGbwOperatingUnitLovVO1() {
        return (XXONGbwOperatingUnitLovVOImpl)findViewObject("XXONGbwOperatingUnitLovVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("oracle.apps.xxon.om.gbw.baklogview.server", /* package name */
      "XXONGbwBacklogViewAMLocal" /* Configuration Name */);
    }

    /**Container's getter for XXONGbwBaklogViewResultVO1
     */
    public XXONGbwBaklogViewResultVOImpl getXXONGbwBaklogViewResultVO1() {
        return (XXONGbwBaklogViewResultVOImpl)findViewObject("XXONGbwBaklogViewResultVO1");
    }


    /**Container's getter for XXONGbwGetRespKeyVO1
     */
    public XXONGbwGetRespKeyVOImpl getXXONGbwGetRespKeyVO1() {
        return (XXONGbwGetRespKeyVOImpl)findViewObject("XXONGbwGetRespKeyVO1");
    }


    /**Container's getter for XXONGbwCorpCodeLovVO1
     */
    public XXONGbwCorpCodeLovVOImpl getXXONGbwCorpCodeLovVO1() {
        return (XXONGbwCorpCodeLovVOImpl)findViewObject("XXONGbwCorpCodeLovVO1");
    }

    /**Container's getter for XXONGbwCust5CodeLovVO1
     */
    public XXONGbwCust5CodeLovVOImpl getXXONGbwCust5CodeLovVO1() {
        return (XXONGbwCust5CodeLovVOImpl)findViewObject("XXONGbwCust5CodeLovVO1");
    }

    /**Container's getter for XXONGbwPackageLovVO1
     */
    public XXONGbwPackageLovVOImpl getXXONGbwPackageLovVO1() {
        return (XXONGbwPackageLovVOImpl)findViewObject("XXONGbwPackageLovVO1");
    }

    /**Container's getter for XXONGbwPtiLovVO1
     */
    public XXONGbwPtiLovVOImpl getXXONGbwPtiLovVO1() {
        return (XXONGbwPtiLovVOImpl)findViewObject("XXONGbwPtiLovVO1");
    }


    /**Container's getter for XXONGbwGetRlagFalgCountVO1
     */
    public XXONGbwGetRlagFalgCountVOImpl getXXONGbwGetRlagFalgCountVO1() {
        return (XXONGbwGetRlagFalgCountVOImpl)findViewObject("XXONGbwGetRlagFalgCountVO1");
    }

    /**Container's getter for XXONGbwDemandBankLovVO1
     */
    public XXONGbwDemandBankLovVOImpl getXXONGbwDemandBankLovVO1() {
        return (XXONGbwDemandBankLovVOImpl)findViewObject("XXONGbwDemandBankLovVO1");
    }

    /**Container's getter for XXONGbwRescheduleReasonLovVO1
     */
    public XXONGbwRescheduleReasonLovVOImpl getXXONGbwRescheduleReasonLovVO1() {
        return (XXONGbwRescheduleReasonLovVOImpl)findViewObject("XXONGbwRescheduleReasonLovVO1");
    }

    /**Container's getter for XXONGbwDateRangeVO1
     */
    public XXONGbwDateRangeVOImpl getXXONGbwDateRangeVO1() {
        return (XXONGbwDateRangeVOImpl)findViewObject("XXONGbwDateRangeVO1");
    }
}
